{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yelee/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1476431205144},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1476431205145},{"_id":"themes/yelee/_config.yml","hash":"f0b8f4e042181a0fc1712330b1e4baf84dfe6553","modified":1476431205146},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1476431205225},{"_id":"source/_posts/Log4Net生成空日志文件的解决方法.md","hash":"d6f900d26d59f2b4688483d18abb153816138604","modified":1476431204928},{"_id":"source/_posts/ZIP压缩-Net与Android相互解压.md","hash":"5f8b866431afdefe3109573f9e68d3924ffe6888","modified":1476431204928},{"_id":"source/_posts/c-基础-扩展方法.md","hash":"1aa5d85c74c6269f1b54145fdae8449e5fde8e80","modified":1476431204934},{"_id":"source/_posts/hello-world.md","hash":"4b21a7e6b85ba140fb9dc245776ed1f1e08b33da","modified":1476431204935},{"_id":"source/_posts/浏览器兼容.md","hash":"c75ec2a0cfba88bdee400e6aec9b6a33a768c6be","modified":1476431204935},{"_id":"source/_posts/百度地图常用功能的使用.md","hash":"c43cfa1263267f9f109b82321087438b042b3fd3","modified":1476431204935},{"_id":"source/about/index.md","hash":"468771682fc714c2b6099f2f726bb0b12eb484f4","modified":1476431204936},{"_id":"source/categories/index.md","hash":"9a2cb8acbdb95d58dadbf65e664e76e5089486dd","modified":1476431204936},{"_id":"source/tags/index.md","hash":"720af2794b18ab333e0ace6c360140e850ee415d","modified":1476431204937},{"_id":"themes/yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1476431205147},{"_id":"themes/yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1476431205148},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1476431205149},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1476431205150},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1476431205155},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1476431205200},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1476431205200},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1476431205200},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1476431205201},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1476431205201},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1476431205224},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1476431205225},{"_id":"themes/yelee/source/404.html","hash":"cbd307f9d0291761ef35cb61f231da3b780f2e13","modified":1476431205225},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1476431205226},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1476431205169},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1476431205168},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1476431205169},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1476431205170},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1476431205172},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1476431205190},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1476431205190},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1476431205191},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1476431205192},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1476431205192},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1476431205194},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1476431205194},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1476431205195},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1476431205196},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1476431205196},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1476431205196},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1476431205199},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1476431205199},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1476431205199},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1476431205200},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1476431205263},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1476431205264},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1476431205266},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1476431205267},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1476431205284},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1476431205335},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1476431205340},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1476431205341},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1476431205340},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1476431205341},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1476431205341},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1476431205341},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1476431205342},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1476431205368},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1476431205369},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1476431205369},{"_id":"themes/yelee/source/img/avatar.jpg","hash":"96b6f8aad9528f6cc125c2b28b611e42f588699f","modified":1476431205370},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1476431205370},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1476431205371},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1476431205371},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1476431205371},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1476431205372},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1476431205372},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1476431205372},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1476431205372},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1476431205373},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1476431205373},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1476431205373},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1476431205374},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1476431205374},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1476431205374},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1476431205375},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1476431205403},{"_id":"themes/yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1476431205404},{"_id":"themes/yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1476431205404},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1476431205272},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1476431205274},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1476431205174},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"a1ff5d49540625cbb034e1e8aae73807ee7bb5a5","modified":1476431205174},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1476431205176},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1476431205177},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1476431205189},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1476431205197},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1476431205197},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1476431205198},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1476431205198},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1476431205198},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1476431205198},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1476431205227},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1476431205229},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1476431205260},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1476431205261},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1476431205284},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1476431205285},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1476431205329},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1476431205330},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1476431205330},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1476431205330},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"371770b054ca345d53d92cea08e977ac1a495fa2","modified":1476431205331},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1476431205331},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1476431205332},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1476431205332},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1476431205332},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1476431205333},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1476431205333},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1476431205333},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1476431205334},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1476431205335},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1476431205334},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1476431205335},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1476431205285},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1476431205286},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1476431205291},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1476431205291},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1476431205292},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1476431205292},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1476431205293},{"_id":"public/about/index.html","hash":"681e16f0fe9aea61946a6cae768176fbf788a263","modified":1476431789930},{"_id":"public/archives/2016/08/index.html","hash":"971b9c8d035e5541e921d929776b5206b36ddbb8","modified":1476431789930},{"_id":"public/archives/2016/10/index.html","hash":"e1d138259e892dcf4cb0d5baf571575b484fd46a","modified":1476431789931},{"_id":"public/categories/插件/index.html","hash":"fd4456efc374384a6599600175ee4d66c612c2c1","modified":1476431789931},{"_id":"public/categories/c-基础/index.html","hash":"b32bb8bed5950a8f9839a73099f735908aecb48b","modified":1476431789932},{"_id":"public/categories/前端基础/index.html","hash":"2c4d776be0dc8cdaa0e8d78ed485f5c399a59821","modified":1476431789932},{"_id":"public/tags/Log4Net/index.html","hash":"41f1af0b8a4c6cd445f63fdd8c66f0a8a913da8f","modified":1476431789932},{"_id":"public/tags/ASP-NET日志/index.html","hash":"41b1b0a11602d85aa3c59c1bb0da82bf74dbc295","modified":1476431789932},{"_id":"public/tags/空日志删除/index.html","hash":"3d6eea4bd14023508fbe4d28027090811a411217","modified":1476431789932},{"_id":"public/tags/扩展方法/index.html","hash":"d68ac0a7a2355e6971a2788ad6b33130aeacc7eb","modified":1476431789932},{"_id":"public/tags/浏览器兼容/index.html","hash":"01bf7e8b4783b495f9f82f51bbbdffa4380cb063","modified":1476431789932},{"_id":"public/tags/百度地图/index.html","hash":"a0356751609e7be05a82f1f2c1e5d51c5684c1d5","modified":1476431789932},{"_id":"public/tags/地图操作/index.html","hash":"164fb77ce20e5f9dffd373d3d4254d779a786b0e","modified":1476431789933},{"_id":"public/categories/index.html","hash":"98a95b4c6f213a73abfd8f6a397915f59e6798a7","modified":1476431789935},{"_id":"public/tags/index.html","hash":"abf94cda959394a85f0096d062e2c32019683d97","modified":1476431789935},{"_id":"public/2016/10/14/浏览器兼容/index.html","hash":"0acee611ef47493d89ddaccb6b5a2ed3feeef1e0","modified":1476431789935},{"_id":"public/2016/09/28/ZIP压缩-Net与Android相互解压/index.html","hash":"2e1af45f1a8947223eb17c330de5038e56829a1c","modified":1476431789936},{"_id":"public/2016/09/12/c-基础-扩展方法/index.html","hash":"b742e979cecb3d3529b0afcfd7895886c9fdb25d","modified":1476431789936},{"_id":"public/2016/09/10/百度地图常用功能的使用/index.html","hash":"b3a2291be2fa261e5802aadcfd0a57913d7e41e0","modified":1476431789936},{"_id":"public/2016/09/10/Log4Net生成空日志文件的解决方法/index.html","hash":"0b7b3c7dea3b4eec893e08c2724feb29873f591d","modified":1476431789936},{"_id":"public/2016/08/10/hello-world/index.html","hash":"e2c924e5b01bf2c6bb5f7155ac792963d3a9bdd7","modified":1476431789936},{"_id":"public/archives/index.html","hash":"f75dd082c0a0817d5a5733bf50cd2c9a7eba217a","modified":1476431789936},{"_id":"public/archives/2016/index.html","hash":"08ed7b1a669be401418f2f87423f2f98d5f64f23","modified":1476431789936},{"_id":"public/archives/2016/09/index.html","hash":"5683e62edae92bec935e572b44e27d5c2f225e90","modified":1476431789936},{"_id":"public/index.html","hash":"0e2539002db9afc3cd2e9069b9059f6341aef231","modified":1476431789937},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1476431789955},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1476431789955},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1476431789955},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1476431789955},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1476431789955},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1476431789955},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1476431789955},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1476431789955},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1476431789956},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1476431789956},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1476431789956},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1476431789956},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1476431789956},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1476431789956},{"_id":"public/img/avatar.jpg","hash":"96b6f8aad9528f6cc125c2b28b611e42f588699f","modified":1476431789956},{"_id":"public/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1476431789956},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1476431789956},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1476431789956},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1476431789957},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1476431789957},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1476431789957},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1476431789957},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1476431789957},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1476431789957},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1476431789957},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1476431789957},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1476431789958},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1476431789958},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1476431789958},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1476431789958},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1476431791266},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1476431791271},{"_id":"public/404.html","hash":"a565ee4430956ffabb331158fcee2078d3bbb276","modified":1476431791276},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1476431791276},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1476431791276},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1476431791276},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1476431791276},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1476431791276},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1476431791276},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1476431791277},{"_id":"public/css/style.css","hash":"1cef0d79fd7b91ed9c04488ada59c6b8c1650761","modified":1476431791277}],"Category":[{"name":"插件","_id":"ciu9hd7920004xs8xlko3ydot"},{"name":"c#基础","_id":"ciu9hd79l000axs8x4nf2vz3y"},{"name":"前端基础","_id":"ciu9hd79t000hxs8xe02rwa0f"}],"Data":[],"Page":[{"title":"关于我","date":"2016-09-10T02:57:28.000Z","comments":0,"socail":false,"share":{"on":false,"baidu":null},"_content":"在这里记录、等待未来的自己","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-09-10 10:57:28\ncomments: false\nsocail: false\nshare:\n on: false\n baidu: \n---\n在这里记录、等待未来的自己","updated":"2016-10-14T07:46:44.936Z","path":"about/index.html","layout":"page","_id":"ciu9hd78u0001xs8xg4e7l16y","content":"<p>在这里记录、等待未来的自己</p>\n","excerpt":"","more":"<p>在这里记录、等待未来的自己</p>\n"},{"title":"categories","date":"2016-09-10T02:48:21.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-09-10 10:48:21\ntype: \"categories\"\n---\n","updated":"2016-10-14T07:46:44.936Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciu9hd7900003xs8x3ppy6m1n","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-09-10T02:40:14.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-09-10 10:40:14\ntype: \"tags\"\n---\n","updated":"2016-10-14T07:46:44.937Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciu9hd79a0007xs8xx08iugmm","content":"","excerpt":"","more":""}],"Post":[{"title":"Log4Net生成空日志文件的解决方法","date":"2016-09-10T12:26:04.000Z","+description":"Log4Net配置对于空日志文件的解决","_content":"\n设置Log4Net并自动删除空日志\n<!--more-->\n1、根据网上的配置说明，该配置将记录Error 级别的错误，按照月份分文件夹，按照天来分文件进行日志的记录，\n完成了配置如下：\n``` bash\n<configuration>\n  <configSections>\n    <section name=\"log4net\" type=\"log4net.Config.Log4NetConfigurationSectionHandler, log4net, Version=1.2.11.0, Culture=neutral, PublicKeyToken=1B44E1D426115821\" />\n  </configSections>\n  <log4net>\n    <root>\n      <!--<level value=\"DEBUG\"/>-->\n      <level value=\"ERROR\"/>\n      <!--根据log级别记录到不同的日志文件-->\n      <!--<appender-ref ref=\"DebugLog\" />-->\n      <appender-ref ref=\"ErrorLog\" />\n    </root>\n    <appender name=\"ErrorLog\" type=\"log4net.Appender.RollingFileAppender\">\n      <!-- 最后放开注释-->\n      <!--<lockingModel type=\"命名空间.MinimalLockDeleteEmpty\" />-->\n      <param name=\"File\" value=\"Log\\\" />\n      <param name=\"AppendToFile\" value=\"true\" />\n      <param name=\"RollingStyle\" value=\"Date\" />\n      <param name=\"DatePattern\" value=\"yyyy-MM\\\\yyyy-MM-dd.'log'\" />\n      <param name=\"StaticLogFileName\" value=\"false\" />\n      <layout type=\"log4net.Layout.PatternLayout\">\n        <conversionPattern value=\"%date [%thread] %-5level %logger - %message%newline\" />\n      </layout>\n      <securityContext type=\"log4net.Util.WindowsSecurityContext\">\n        <credentials value=\"Process\" />\n      </securityContext>\n      <filter type=\"log4net.Filter.LevelRangeFilter\">\n        <levelMin value=\"ERROR\" />\n        <levelMax value=\"ERROR\" />\n      </filter>\n    </appender>\n  </log4net>\n</configuration>\n```\n2、运行上面的（除红色）的设置后，发现就算没有抛出异常，log4net每天同样会创建一个空的日志文件。\n3、查找搜索了下国内网站，未发现解决的方法，只是想到如果log4net不支持的化，可以在网站运行后\n创建一个定时器，每隔一天检查一下对应的日志文件是否有空，有则删除；\n4、google搜索到国外的网站，发现可以继承**FileAppender.MinimalLock**类 重写**ReleaseLock** 方法 来实现写日志完成后检查空文件并删除的功能。\n[引用地址](http://stackoverflow.com/questions/2533403/how-to-disable-creation-of-empty-log-file-on-app-start)\n``` bash\nusing log4net.Appender;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nnamespace 命名空间\n{\n    public class MinimalLockDeleteEmpty : FileAppender.MinimalLock\n    {\n        public override void ReleaseLock()\n        {\n            base.ReleaseLock();\n\n            var logFile = new FileInfo(CurrentAppender.File);\n            if (logFile.Exists && logFile.Length <= 0)\n            {\n                logFile.Delete();\n            }\n        }\n    }\n}\n```\n5、最后在配置文件中将类插入完成调用\n``` bash\n<lockingModel type=\"命名空间.MinimalLockDeleteEmpty\" />\n```\n\n6、最后Log4Net效果就是记录中没有空日志文件且存放服务器时按照月份建文件夹，文件夹内按照日期建日志文件。","source":"_posts/Log4Net生成空日志文件的解决方法.md","raw":"---\ntitle: Log4Net生成空日志文件的解决方法\ndate: 2016-09-10 20:26:04\ntags:\n- Log4Net\n- ASP.NET日志\n- 空日志删除\ncategories:\n- 插件\n+description: \"Log4Net配置对于空日志文件的解决\"\n---\n\n设置Log4Net并自动删除空日志\n<!--more-->\n1、根据网上的配置说明，该配置将记录Error 级别的错误，按照月份分文件夹，按照天来分文件进行日志的记录，\n完成了配置如下：\n``` bash\n<configuration>\n  <configSections>\n    <section name=\"log4net\" type=\"log4net.Config.Log4NetConfigurationSectionHandler, log4net, Version=1.2.11.0, Culture=neutral, PublicKeyToken=1B44E1D426115821\" />\n  </configSections>\n  <log4net>\n    <root>\n      <!--<level value=\"DEBUG\"/>-->\n      <level value=\"ERROR\"/>\n      <!--根据log级别记录到不同的日志文件-->\n      <!--<appender-ref ref=\"DebugLog\" />-->\n      <appender-ref ref=\"ErrorLog\" />\n    </root>\n    <appender name=\"ErrorLog\" type=\"log4net.Appender.RollingFileAppender\">\n      <!-- 最后放开注释-->\n      <!--<lockingModel type=\"命名空间.MinimalLockDeleteEmpty\" />-->\n      <param name=\"File\" value=\"Log\\\" />\n      <param name=\"AppendToFile\" value=\"true\" />\n      <param name=\"RollingStyle\" value=\"Date\" />\n      <param name=\"DatePattern\" value=\"yyyy-MM\\\\yyyy-MM-dd.'log'\" />\n      <param name=\"StaticLogFileName\" value=\"false\" />\n      <layout type=\"log4net.Layout.PatternLayout\">\n        <conversionPattern value=\"%date [%thread] %-5level %logger - %message%newline\" />\n      </layout>\n      <securityContext type=\"log4net.Util.WindowsSecurityContext\">\n        <credentials value=\"Process\" />\n      </securityContext>\n      <filter type=\"log4net.Filter.LevelRangeFilter\">\n        <levelMin value=\"ERROR\" />\n        <levelMax value=\"ERROR\" />\n      </filter>\n    </appender>\n  </log4net>\n</configuration>\n```\n2、运行上面的（除红色）的设置后，发现就算没有抛出异常，log4net每天同样会创建一个空的日志文件。\n3、查找搜索了下国内网站，未发现解决的方法，只是想到如果log4net不支持的化，可以在网站运行后\n创建一个定时器，每隔一天检查一下对应的日志文件是否有空，有则删除；\n4、google搜索到国外的网站，发现可以继承**FileAppender.MinimalLock**类 重写**ReleaseLock** 方法 来实现写日志完成后检查空文件并删除的功能。\n[引用地址](http://stackoverflow.com/questions/2533403/how-to-disable-creation-of-empty-log-file-on-app-start)\n``` bash\nusing log4net.Appender;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nnamespace 命名空间\n{\n    public class MinimalLockDeleteEmpty : FileAppender.MinimalLock\n    {\n        public override void ReleaseLock()\n        {\n            base.ReleaseLock();\n\n            var logFile = new FileInfo(CurrentAppender.File);\n            if (logFile.Exists && logFile.Length <= 0)\n            {\n                logFile.Delete();\n            }\n        }\n    }\n}\n```\n5、最后在配置文件中将类插入完成调用\n``` bash\n<lockingModel type=\"命名空间.MinimalLockDeleteEmpty\" />\n```\n\n6、最后Log4Net效果就是记录中没有空日志文件且存放服务器时按照月份建文件夹，文件夹内按照日期建日志文件。","slug":"Log4Net生成空日志文件的解决方法","published":1,"updated":"2016-10-14T07:46:44.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu9hd78o0000xs8x1veqqx7e","content":"<p>设置Log4Net并自动删除空日志<br><a id=\"more\"></a><br>1、根据网上的配置说明，该配置将记录Error 级别的错误，按照月份分文件夹，按照天来分文件进行日志的记录，<br>完成了配置如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">  &lt;configSections&gt;</div><div class=\"line\">    &lt;section name=<span class=\"string\">\"log4net\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"log4net.Config.Log4NetConfigurationSectionHandler, log4net, Version=1.2.11.0, Culture=neutral, PublicKeyToken=1B44E1D426115821\"</span> /&gt;</div><div class=\"line\">  &lt;/configSections&gt;</div><div class=\"line\">  &lt;<span class=\"built_in\">log</span>4net&gt;</div><div class=\"line\">    &lt;root&gt;</div><div class=\"line\">      &lt;!--&lt;level value=<span class=\"string\">\"DEBUG\"</span>/&gt;--&gt;</div><div class=\"line\">      &lt;level value=<span class=\"string\">\"ERROR\"</span>/&gt;</div><div class=\"line\">      &lt;!--根据<span class=\"built_in\">log</span>级别记录到不同的日志文件--&gt;</div><div class=\"line\">      &lt;!--&lt;appender-ref ref=<span class=\"string\">\"DebugLog\"</span> /&gt;--&gt;</div><div class=\"line\">      &lt;appender-ref ref=<span class=\"string\">\"ErrorLog\"</span> /&gt;</div><div class=\"line\">    &lt;/root&gt;</div><div class=\"line\">    &lt;appender name=<span class=\"string\">\"ErrorLog\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"log4net.Appender.RollingFileAppender\"</span>&gt;</div><div class=\"line\">      &lt;!-- 最后放开注释--&gt;</div><div class=\"line\">      &lt;!--&lt;lockingModel <span class=\"built_in\">type</span>=<span class=\"string\">\"命名空间.MinimalLockDeleteEmpty\"</span> /&gt;--&gt;</div><div class=\"line\">      &lt;param name=<span class=\"string\">\"File\"</span> value=<span class=\"string\">\"Log\\\" /&gt;</span></div><div class=\"line\">      &lt;param name=\"AppendToFile<span class=\"string\">\" value=\"</span><span class=\"literal\">true</span><span class=\"string\">\" /&gt;</span></div><div class=\"line\">      &lt;param name=\"RollingStyle<span class=\"string\">\" value=\"</span>Date<span class=\"string\">\" /&gt;</span></div><div class=\"line\">      &lt;param name=\"DatePattern<span class=\"string\">\" value=\"</span>yyyy-MM\\\\yyyy-MM-dd.<span class=\"string\">'log'</span><span class=\"string\">\" /&gt;</span></div><div class=\"line\">      &lt;param name=\"StaticLogFileName<span class=\"string\">\" value=\"</span><span class=\"literal\">false</span><span class=\"string\">\" /&gt;</span></div><div class=\"line\">      &lt;layout type=\"<span class=\"built_in\">log</span>4net.Layout.PatternLayout<span class=\"string\">\"&gt;</span></div><div class=\"line\">        &lt;conversionPattern value=\"%date [%thread] %-5level %logger - %message%newline<span class=\"string\">\" /&gt;</span></div><div class=\"line\">      &lt;/layout&gt;</div><div class=\"line\">      &lt;securityContext type=\"<span class=\"built_in\">log</span>4net.Util.WindowsSecurityContext<span class=\"string\">\"&gt;</span></div><div class=\"line\">        &lt;credentials value=\"Process<span class=\"string\">\" /&gt;</span></div><div class=\"line\">      &lt;/securityContext&gt;</div><div class=\"line\">      &lt;filter type=\"<span class=\"built_in\">log</span>4net.Filter.LevelRangeFilter<span class=\"string\">\"&gt;</span></div><div class=\"line\">        &lt;levelMin value=\"ERROR<span class=\"string\">\" /&gt;</span></div><div class=\"line\">        &lt;levelMax value=\"ERROR<span class=\"string\">\" /&gt;</span></div><div class=\"line\">      &lt;/filter&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">  &lt;/log4net&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<p>2、运行上面的（除红色）的设置后，发现就算没有抛出异常，log4net每天同样会创建一个空的日志文件。<br>3、查找搜索了下国内网站，未发现解决的方法，只是想到如果log4net不支持的化，可以在网站运行后<br>创建一个定时器，每隔一天检查一下对应的日志文件是否有空，有则删除；<br>4、google搜索到国外的网站，发现可以继承<strong>FileAppender.MinimalLock</strong>类 重写<strong>ReleaseLock</strong> 方法 来实现写日志完成后检查空文件并删除的功能。<br><a href=\"http://stackoverflow.com/questions/2533403/how-to-disable-creation-of-empty-log-file-on-app-start\" target=\"_blank\" rel=\"external\">引用地址</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">using <span class=\"built_in\">log</span>4net.Appender;</div><div class=\"line\">using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.IO;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Text;</div><div class=\"line\"></div><div class=\"line\">namespace 命名空间</div><div class=\"line\">&#123;</div><div class=\"line\">    public class MinimalLockDeleteEmpty : FileAppender.MinimalLock</div><div class=\"line\">    &#123;</div><div class=\"line\">        public override void <span class=\"function\"><span class=\"title\">ReleaseLock</span></span>()</div><div class=\"line\">        &#123;</div><div class=\"line\">            base.ReleaseLock();</div><div class=\"line\"></div><div class=\"line\">            var <span class=\"built_in\">log</span>File = new FileInfo(CurrentAppender.File);</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">log</span>File.Exists &amp;&amp; <span class=\"built_in\">log</span>File.Length &lt;= 0)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"built_in\">log</span>File.Delete();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5、最后在配置文件中将类插入完成调用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;lockingModel <span class=\"built_in\">type</span>=<span class=\"string\">\"命名空间.MinimalLockDeleteEmpty\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>6、最后Log4Net效果就是记录中没有空日志文件且存放服务器时按照月份建文件夹，文件夹内按照日期建日志文件。</p>\n","excerpt":"<p>设置Log4Net并自动删除空日志<br>","more":"<br>1、根据网上的配置说明，该配置将记录Error 级别的错误，按照月份分文件夹，按照天来分文件进行日志的记录，<br>完成了配置如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">  &lt;configSections&gt;</div><div class=\"line\">    &lt;section name=<span class=\"string\">\"log4net\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"log4net.Config.Log4NetConfigurationSectionHandler, log4net, Version=1.2.11.0, Culture=neutral, PublicKeyToken=1B44E1D426115821\"</span> /&gt;</div><div class=\"line\">  &lt;/configSections&gt;</div><div class=\"line\">  &lt;<span class=\"built_in\">log</span>4net&gt;</div><div class=\"line\">    &lt;root&gt;</div><div class=\"line\">      &lt;!--&lt;level value=<span class=\"string\">\"DEBUG\"</span>/&gt;--&gt;</div><div class=\"line\">      &lt;level value=<span class=\"string\">\"ERROR\"</span>/&gt;</div><div class=\"line\">      &lt;!--根据<span class=\"built_in\">log</span>级别记录到不同的日志文件--&gt;</div><div class=\"line\">      &lt;!--&lt;appender-ref ref=<span class=\"string\">\"DebugLog\"</span> /&gt;--&gt;</div><div class=\"line\">      &lt;appender-ref ref=<span class=\"string\">\"ErrorLog\"</span> /&gt;</div><div class=\"line\">    &lt;/root&gt;</div><div class=\"line\">    &lt;appender name=<span class=\"string\">\"ErrorLog\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"log4net.Appender.RollingFileAppender\"</span>&gt;</div><div class=\"line\">      &lt;!-- 最后放开注释--&gt;</div><div class=\"line\">      &lt;!--&lt;lockingModel <span class=\"built_in\">type</span>=<span class=\"string\">\"命名空间.MinimalLockDeleteEmpty\"</span> /&gt;--&gt;</div><div class=\"line\">      &lt;param name=<span class=\"string\">\"File\"</span> value=<span class=\"string\">\"Log\\\" /&gt;</div><div class=\"line\">      &lt;param name=\"</span>AppendToFile<span class=\"string\">\" value=\"</span><span class=\"literal\">true</span><span class=\"string\">\" /&gt;</div><div class=\"line\">      &lt;param name=\"</span>RollingStyle<span class=\"string\">\" value=\"</span>Date<span class=\"string\">\" /&gt;</div><div class=\"line\">      &lt;param name=\"</span>DatePattern<span class=\"string\">\" value=\"</span>yyyy-MM\\\\yyyy-MM-dd.<span class=\"string\">'log'</span><span class=\"string\">\" /&gt;</div><div class=\"line\">      &lt;param name=\"</span>StaticLogFileName<span class=\"string\">\" value=\"</span><span class=\"literal\">false</span><span class=\"string\">\" /&gt;</div><div class=\"line\">      &lt;layout type=\"</span><span class=\"built_in\">log</span>4net.Layout.PatternLayout<span class=\"string\">\"&gt;</div><div class=\"line\">        &lt;conversionPattern value=\"</span>%date [%thread] %-5level %logger - %message%newline<span class=\"string\">\" /&gt;</div><div class=\"line\">      &lt;/layout&gt;</div><div class=\"line\">      &lt;securityContext type=\"</span><span class=\"built_in\">log</span>4net.Util.WindowsSecurityContext<span class=\"string\">\"&gt;</div><div class=\"line\">        &lt;credentials value=\"</span>Process<span class=\"string\">\" /&gt;</div><div class=\"line\">      &lt;/securityContext&gt;</div><div class=\"line\">      &lt;filter type=\"</span><span class=\"built_in\">log</span>4net.Filter.LevelRangeFilter<span class=\"string\">\"&gt;</div><div class=\"line\">        &lt;levelMin value=\"</span>ERROR<span class=\"string\">\" /&gt;</div><div class=\"line\">        &lt;levelMax value=\"</span>ERROR<span class=\"string\">\" /&gt;</div><div class=\"line\">      &lt;/filter&gt;</div><div class=\"line\">    &lt;/appender&gt;</div><div class=\"line\">  &lt;/log4net&gt;</div><div class=\"line\">&lt;/configuration&gt;</span></div></pre></td></tr></table></figure></p>\n<p>2、运行上面的（除红色）的设置后，发现就算没有抛出异常，log4net每天同样会创建一个空的日志文件。<br>3、查找搜索了下国内网站，未发现解决的方法，只是想到如果log4net不支持的化，可以在网站运行后<br>创建一个定时器，每隔一天检查一下对应的日志文件是否有空，有则删除；<br>4、google搜索到国外的网站，发现可以继承<strong>FileAppender.MinimalLock</strong>类 重写<strong>ReleaseLock</strong> 方法 来实现写日志完成后检查空文件并删除的功能。<br><a href=\"http://stackoverflow.com/questions/2533403/how-to-disable-creation-of-empty-log-file-on-app-start\">引用地址</a><br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">using <span class=\"built_in\">log</span>4net.Appender;</div><div class=\"line\">using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.IO;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Text;</div><div class=\"line\"></div><div class=\"line\">namespace 命名空间</div><div class=\"line\">&#123;</div><div class=\"line\">    public class MinimalLockDeleteEmpty : FileAppender.MinimalLock</div><div class=\"line\">    &#123;</div><div class=\"line\">        public override void <span class=\"function\"><span class=\"title\">ReleaseLock</span></span>()</div><div class=\"line\">        &#123;</div><div class=\"line\">            base.ReleaseLock();</div><div class=\"line\"></div><div class=\"line\">            var <span class=\"built_in\">log</span>File = new FileInfo(CurrentAppender.File);</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">log</span>File.Exists &amp;&amp; <span class=\"built_in\">log</span>File.Length &lt;= 0)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"built_in\">log</span>File.Delete();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5、最后在配置文件中将类插入完成调用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;lockingModel <span class=\"built_in\">type</span>=<span class=\"string\">\"命名空间.MinimalLockDeleteEmpty\"</span> /&gt;</div></pre></td></tr></table></figure></p>\n<p>6、最后Log4Net效果就是记录中没有空日志文件且存放服务器时按照月份建文件夹，文件夹内按照日期建日志文件。</p>"},{"title":"ZIP压缩.Net与Android相互解压","date":"2016-09-28T13:13:14.000Z","_content":"\n使用.NET搭建webservice，使用JAVA在Android端接受\n\n.Net与JAVA互相通过ZIP压缩协议进行压缩和解压字符串，减少传输字节量，加快传输速度\n增加用户友好。\n<!--more-->\nAndroid\n``` bash\npackage com.example.administrator.myapplication;\n\nimport android.util.Base64;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.util.zip.GZIPInputStream;\nimport java.util.zip.GZIPOutputStream;\n\n/**\n * Created by Administrator on 2016/9/15.\n */\npublic class GZIP {\n    public static byte[] compress(String string) throws IOException {\n        ByteArrayOutputStream os = new ByteArrayOutputStream(string.length());\n        GZIPOutputStream gos = new GZIPOutputStream(os);\n        gos.write(string.getBytes());\n        gos.close();\n        byte[] compressed = os.toByteArray();\n        os.close();\n        return compressed;\n    }\n\n    public static String decompress(byte[] compressed) throws IOException {\n        final int BUFFER_SIZE = 32;\n        ByteArrayInputStream is = new ByteArrayInputStream(compressed);\n        GZIPInputStream gis = new GZIPInputStream(is, BUFFER_SIZE);\n        StringBuilder string = new StringBuilder();\n        byte[] data = new byte[BUFFER_SIZE];\n        int bytesRead;\n        while ((bytesRead = gis.read(data)) != -1) {\n            string.append(new String(data, 0, bytesRead));\n        }\n        gis.close();\n        is.close();\n        return string.toString();\n    }\n\n    public static String compress1(String str) throws IOException {\n        byte[] data=str.getBytes(\"UTF-8\");\n        byte[] blockcopy = ByteBuffer\n                .allocate(4)\n                .order(java.nio.ByteOrder.LITTLE_ENDIAN)\n                .putInt(data.length)\n                .array();\n        ByteArrayOutputStream os = new ByteArrayOutputStream(data.length);\n//        os.write(new byte[]{0x05, 0, 0, 0},0,4);\n        GZIPOutputStream gos = new GZIPOutputStream(os);\n        gos.write(data);\n        gos.close();\n        os.close();\n        byte[] compressed = new byte[4 + os.toByteArray().length];\n        System.arraycopy(blockcopy, 0, compressed, 0, 4);\n        System.arraycopy(os.toByteArray(), 0, compressed, 4,\n                os.toByteArray().length);\n        byte[] result1= Base64.encode(compressed,Base64.DEFAULT);\n        return new String (result1);\n    }\n\n    public static String decompress1(String zipText) throws IOException {\n        byte[] compressed = Base64.decode(zipText,Base64.DEFAULT);\n        if (compressed.length > 4)\n        {\n            GZIPInputStream gzipInputStream = new GZIPInputStream(\n                    new ByteArrayInputStream(compressed, 4,\n                            compressed.length - 4));\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            for (int value = 0; value != -1;) {\n                value = gzipInputStream.read();\n                if (value != -1) {\n                    baos.write(value);\n                }\n            }\n            gzipInputStream.close();\n            baos.close();\n            String sReturn = new String(baos.toByteArray(), \"UTF-8\");\n            return sReturn;\n        }\n        else\n        {\n            return \"\";\n        }\n    }\n}\n\n```\n\n.Net \n``` bash\nusing System;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Text;\n\n\nnamespace GZIPService\n{\n    public class ZipHelper\n    {\n        public static string compress(string text)\n        {\n            byte[] buffer = Encoding.UTF8.GetBytes(text);\n            MemoryStream ms = new MemoryStream();\n            using (GZipStream zip = new GZipStream(ms, CompressionMode.Compress, true))\n            {\n                zip.Write(buffer, 0, buffer.Length);\n            }\n\n            ms.Position = 0;\n            MemoryStream outStream = new MemoryStream();\n\n            byte[] compressed = new byte[ms.Length];\n            ms.Read(compressed, 0, compressed.Length);\n\n            byte[] gzBuffer = new byte[compressed.Length + 4];\n            System.Buffer.BlockCopy(compressed, 0, gzBuffer, 4, compressed.Length);\n            System.Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length), 0, gzBuffer, 0, 4);\n            return Convert.ToBase64String(gzBuffer);\n        }\n\n        public static string decompress(string compressedText)\n        {\n            byte[] gzBuffer = Convert.FromBase64String(compressedText);\n            using (MemoryStream ms = new MemoryStream())\n            {\n                int msgLength = BitConverter.ToInt32(gzBuffer, 0);\n                ms.Write(gzBuffer, 4, gzBuffer.Length - 4);\n\n                byte[] buffer = new byte[msgLength];\n\n                ms.Position = 0;\n                using (GZipStream zip = new GZipStream(ms, CompressionMode.Decompress))\n                {\n                    zip.Read(buffer, 0, buffer.Length);\n                }\n\n                return Encoding.UTF8.GetString(buffer);\n            }\n        }\n    }\n}\n\n```","source":"_posts/ZIP压缩-Net与Android相互解压.md","raw":"---\ntitle: ZIP压缩.Net与Android相互解压\ndate: 2016-09-28 21:13:14\ncategories:\n- c#基础\ntags:\n---\n\n使用.NET搭建webservice，使用JAVA在Android端接受\n\n.Net与JAVA互相通过ZIP压缩协议进行压缩和解压字符串，减少传输字节量，加快传输速度\n增加用户友好。\n<!--more-->\nAndroid\n``` bash\npackage com.example.administrator.myapplication;\n\nimport android.util.Base64;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.util.zip.GZIPInputStream;\nimport java.util.zip.GZIPOutputStream;\n\n/**\n * Created by Administrator on 2016/9/15.\n */\npublic class GZIP {\n    public static byte[] compress(String string) throws IOException {\n        ByteArrayOutputStream os = new ByteArrayOutputStream(string.length());\n        GZIPOutputStream gos = new GZIPOutputStream(os);\n        gos.write(string.getBytes());\n        gos.close();\n        byte[] compressed = os.toByteArray();\n        os.close();\n        return compressed;\n    }\n\n    public static String decompress(byte[] compressed) throws IOException {\n        final int BUFFER_SIZE = 32;\n        ByteArrayInputStream is = new ByteArrayInputStream(compressed);\n        GZIPInputStream gis = new GZIPInputStream(is, BUFFER_SIZE);\n        StringBuilder string = new StringBuilder();\n        byte[] data = new byte[BUFFER_SIZE];\n        int bytesRead;\n        while ((bytesRead = gis.read(data)) != -1) {\n            string.append(new String(data, 0, bytesRead));\n        }\n        gis.close();\n        is.close();\n        return string.toString();\n    }\n\n    public static String compress1(String str) throws IOException {\n        byte[] data=str.getBytes(\"UTF-8\");\n        byte[] blockcopy = ByteBuffer\n                .allocate(4)\n                .order(java.nio.ByteOrder.LITTLE_ENDIAN)\n                .putInt(data.length)\n                .array();\n        ByteArrayOutputStream os = new ByteArrayOutputStream(data.length);\n//        os.write(new byte[]{0x05, 0, 0, 0},0,4);\n        GZIPOutputStream gos = new GZIPOutputStream(os);\n        gos.write(data);\n        gos.close();\n        os.close();\n        byte[] compressed = new byte[4 + os.toByteArray().length];\n        System.arraycopy(blockcopy, 0, compressed, 0, 4);\n        System.arraycopy(os.toByteArray(), 0, compressed, 4,\n                os.toByteArray().length);\n        byte[] result1= Base64.encode(compressed,Base64.DEFAULT);\n        return new String (result1);\n    }\n\n    public static String decompress1(String zipText) throws IOException {\n        byte[] compressed = Base64.decode(zipText,Base64.DEFAULT);\n        if (compressed.length > 4)\n        {\n            GZIPInputStream gzipInputStream = new GZIPInputStream(\n                    new ByteArrayInputStream(compressed, 4,\n                            compressed.length - 4));\n\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            for (int value = 0; value != -1;) {\n                value = gzipInputStream.read();\n                if (value != -1) {\n                    baos.write(value);\n                }\n            }\n            gzipInputStream.close();\n            baos.close();\n            String sReturn = new String(baos.toByteArray(), \"UTF-8\");\n            return sReturn;\n        }\n        else\n        {\n            return \"\";\n        }\n    }\n}\n\n```\n\n.Net \n``` bash\nusing System;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Text;\n\n\nnamespace GZIPService\n{\n    public class ZipHelper\n    {\n        public static string compress(string text)\n        {\n            byte[] buffer = Encoding.UTF8.GetBytes(text);\n            MemoryStream ms = new MemoryStream();\n            using (GZipStream zip = new GZipStream(ms, CompressionMode.Compress, true))\n            {\n                zip.Write(buffer, 0, buffer.Length);\n            }\n\n            ms.Position = 0;\n            MemoryStream outStream = new MemoryStream();\n\n            byte[] compressed = new byte[ms.Length];\n            ms.Read(compressed, 0, compressed.Length);\n\n            byte[] gzBuffer = new byte[compressed.Length + 4];\n            System.Buffer.BlockCopy(compressed, 0, gzBuffer, 4, compressed.Length);\n            System.Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length), 0, gzBuffer, 0, 4);\n            return Convert.ToBase64String(gzBuffer);\n        }\n\n        public static string decompress(string compressedText)\n        {\n            byte[] gzBuffer = Convert.FromBase64String(compressedText);\n            using (MemoryStream ms = new MemoryStream())\n            {\n                int msgLength = BitConverter.ToInt32(gzBuffer, 0);\n                ms.Write(gzBuffer, 4, gzBuffer.Length - 4);\n\n                byte[] buffer = new byte[msgLength];\n\n                ms.Position = 0;\n                using (GZipStream zip = new GZipStream(ms, CompressionMode.Decompress))\n                {\n                    zip.Read(buffer, 0, buffer.Length);\n                }\n\n                return Encoding.UTF8.GetString(buffer);\n            }\n        }\n    }\n}\n\n```","slug":"ZIP压缩-Net与Android相互解压","published":1,"updated":"2016-10-14T07:46:44.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu9hd78x0002xs8x1du7gb2g","content":"<p>使用.NET搭建webservice，使用JAVA在Android端接受</p>\n<p>.Net与JAVA互相通过ZIP压缩协议进行压缩和解压字符串，减少传输字节量，加快传输速度<br>增加用户友好。<br><a id=\"more\"></a><br>Android<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.example.administrator.myapplication;</div><div class=\"line\"></div><div class=\"line\">import android.util.Base64;</div><div class=\"line\"></div><div class=\"line\">import java.io.ByteArrayInputStream;</div><div class=\"line\">import java.io.ByteArrayOutputStream;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.nio.ByteBuffer;</div><div class=\"line\">import java.util.zip.GZIPInputStream;</div><div class=\"line\">import java.util.zip.GZIPOutputStream;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by Administrator on 2016/9/15.</div><div class=\"line\"> */</div><div class=\"line\">public class GZIP &#123;</div><div class=\"line\">    public static byte[] compress(String string) throws IOException &#123;</div><div class=\"line\">        ByteArrayOutputStream os = new ByteArrayOutputStream(string.length());</div><div class=\"line\">        GZIPOutputStream gos = new GZIPOutputStream(os);</div><div class=\"line\">        gos.write(string.getBytes());</div><div class=\"line\">        gos.close();</div><div class=\"line\">        byte[] compressed = os.toByteArray();</div><div class=\"line\">        os.close();</div><div class=\"line\">        <span class=\"built_in\">return</span> compressed;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static String decompress(byte[] compressed) throws IOException &#123;</div><div class=\"line\">        final int BUFFER_SIZE = 32;</div><div class=\"line\">        ByteArrayInputStream is = new ByteArrayInputStream(compressed);</div><div class=\"line\">        GZIPInputStream gis = new GZIPInputStream(is, BUFFER_SIZE);</div><div class=\"line\">        StringBuilder string = new StringBuilder();</div><div class=\"line\">        byte[] data = new byte[BUFFER_SIZE];</div><div class=\"line\">        int bytesRead;</div><div class=\"line\">        <span class=\"keyword\">while</span> ((bytesRead = gis.read(data)) != -1) &#123;</div><div class=\"line\">            string.append(new String(data, 0, bytesRead));</div><div class=\"line\">        &#125;</div><div class=\"line\">        gis.close();</div><div class=\"line\">        is.close();</div><div class=\"line\">        <span class=\"built_in\">return</span> string.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static String compress1(String str) throws IOException &#123;</div><div class=\"line\">        byte[] data=str.getBytes(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">        byte[] blockcopy = ByteBuffer</div><div class=\"line\">                .allocate(4)</div><div class=\"line\">                .order(java.nio.ByteOrder.LITTLE_ENDIAN)</div><div class=\"line\">                .putInt(data.length)</div><div class=\"line\">                .array();</div><div class=\"line\">        ByteArrayOutputStream os = new ByteArrayOutputStream(data.length);</div><div class=\"line\">//        os.write(new byte[]&#123;0x05, 0, 0, 0&#125;,0,4);</div><div class=\"line\">        GZIPOutputStream gos = new GZIPOutputStream(os);</div><div class=\"line\">        gos.write(data);</div><div class=\"line\">        gos.close();</div><div class=\"line\">        os.close();</div><div class=\"line\">        byte[] compressed = new byte[4 + os.toByteArray().length];</div><div class=\"line\">        System.arraycopy(blockcopy, 0, compressed, 0, 4);</div><div class=\"line\">        System.arraycopy(os.toByteArray(), 0, compressed, 4,</div><div class=\"line\">                os.toByteArray().length);</div><div class=\"line\">        byte[] result1= Base64.encode(compressed,Base64.DEFAULT);</div><div class=\"line\">        <span class=\"built_in\">return</span> new String (result1);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static String decompress1(String zipText) throws IOException &#123;</div><div class=\"line\">        byte[] compressed = Base64.decode(zipText,Base64.DEFAULT);</div><div class=\"line\">        <span class=\"keyword\">if</span> (compressed.length &gt; 4)</div><div class=\"line\">        &#123;</div><div class=\"line\">            GZIPInputStream gzipInputStream = new GZIPInputStream(</div><div class=\"line\">                    new ByteArrayInputStream(compressed, 4,</div><div class=\"line\">                            compressed.length - 4));</div><div class=\"line\"></div><div class=\"line\">            ByteArrayOutputStream baos = new ByteArrayOutputStream();</div><div class=\"line\">            <span class=\"keyword\">for</span> (int value = 0; value != -1;) &#123;</div><div class=\"line\">                value = gzipInputStream.read();</div><div class=\"line\">                <span class=\"keyword\">if</span> (value != -1) &#123;</div><div class=\"line\">                    baos.write(value);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            gzipInputStream.close();</div><div class=\"line\">            baos.close();</div><div class=\"line\">            String sReturn = new String(baos.toByteArray(), <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">            <span class=\"built_in\">return</span> sReturn;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>.Net<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\">using System.IO;</div><div class=\"line\">using System.IO.Compression;</div><div class=\"line\">using System.Text;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">namespace GZIPService</div><div class=\"line\">&#123;</div><div class=\"line\">    public class ZipHelper</div><div class=\"line\">    &#123;</div><div class=\"line\">        public static string compress(string text)</div><div class=\"line\">        &#123;</div><div class=\"line\">            byte[] buffer = Encoding.UTF8.GetBytes(text);</div><div class=\"line\">            MemoryStream ms = new MemoryStream();</div><div class=\"line\">            using (GZipStream zip = new GZipStream(ms, CompressionMode.Compress, <span class=\"literal\">true</span>))</div><div class=\"line\">            &#123;</div><div class=\"line\">                zip.Write(buffer, 0, buffer.Length);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            ms.Position = 0;</div><div class=\"line\">            MemoryStream outStream = new MemoryStream();</div><div class=\"line\"></div><div class=\"line\">            byte[] compressed = new byte[ms.Length];</div><div class=\"line\">            ms.Read(compressed, 0, compressed.Length);</div><div class=\"line\"></div><div class=\"line\">            byte[] gzBuffer = new byte[compressed.Length + 4];</div><div class=\"line\">            System.Buffer.BlockCopy(compressed, 0, gzBuffer, 4, compressed.Length);</div><div class=\"line\">            System.Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length), 0, gzBuffer, 0, 4);</div><div class=\"line\">            <span class=\"built_in\">return</span> Convert.ToBase64String(gzBuffer);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public static string decompress(string compressedText)</div><div class=\"line\">        &#123;</div><div class=\"line\">            byte[] gzBuffer = Convert.FromBase64String(compressedText);</div><div class=\"line\">            using (MemoryStream ms = new MemoryStream())</div><div class=\"line\">            &#123;</div><div class=\"line\">                int msgLength = BitConverter.ToInt32(gzBuffer, 0);</div><div class=\"line\">                ms.Write(gzBuffer, 4, gzBuffer.Length - 4);</div><div class=\"line\"></div><div class=\"line\">                byte[] buffer = new byte[msgLength];</div><div class=\"line\"></div><div class=\"line\">                ms.Position = 0;</div><div class=\"line\">                using (GZipStream zip = new GZipStream(ms, CompressionMode.Decompress))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    zip.Read(buffer, 0, buffer.Length);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"built_in\">return</span> Encoding.UTF8.GetString(buffer);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>使用.NET搭建webservice，使用JAVA在Android端接受</p>\n<p>.Net与JAVA互相通过ZIP压缩协议进行压缩和解压字符串，减少传输字节量，加快传输速度<br>增加用户友好。<br>","more":"<br>Android<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.example.administrator.myapplication;</div><div class=\"line\"></div><div class=\"line\">import android.util.Base64;</div><div class=\"line\"></div><div class=\"line\">import java.io.ByteArrayInputStream;</div><div class=\"line\">import java.io.ByteArrayOutputStream;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.nio.ByteBuffer;</div><div class=\"line\">import java.util.zip.GZIPInputStream;</div><div class=\"line\">import java.util.zip.GZIPOutputStream;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by Administrator on 2016/9/15.</div><div class=\"line\"> */</div><div class=\"line\">public class GZIP &#123;</div><div class=\"line\">    public static byte[] compress(String string) throws IOException &#123;</div><div class=\"line\">        ByteArrayOutputStream os = new ByteArrayOutputStream(string.length());</div><div class=\"line\">        GZIPOutputStream gos = new GZIPOutputStream(os);</div><div class=\"line\">        gos.write(string.getBytes());</div><div class=\"line\">        gos.close();</div><div class=\"line\">        byte[] compressed = os.toByteArray();</div><div class=\"line\">        os.close();</div><div class=\"line\">        <span class=\"built_in\">return</span> compressed;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static String decompress(byte[] compressed) throws IOException &#123;</div><div class=\"line\">        final int BUFFER_SIZE = 32;</div><div class=\"line\">        ByteArrayInputStream is = new ByteArrayInputStream(compressed);</div><div class=\"line\">        GZIPInputStream gis = new GZIPInputStream(is, BUFFER_SIZE);</div><div class=\"line\">        StringBuilder string = new StringBuilder();</div><div class=\"line\">        byte[] data = new byte[BUFFER_SIZE];</div><div class=\"line\">        int bytesRead;</div><div class=\"line\">        <span class=\"keyword\">while</span> ((bytesRead = gis.read(data)) != -1) &#123;</div><div class=\"line\">            string.append(new String(data, 0, bytesRead));</div><div class=\"line\">        &#125;</div><div class=\"line\">        gis.close();</div><div class=\"line\">        is.close();</div><div class=\"line\">        <span class=\"built_in\">return</span> string.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static String compress1(String str) throws IOException &#123;</div><div class=\"line\">        byte[] data=str.getBytes(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">        byte[] blockcopy = ByteBuffer</div><div class=\"line\">                .allocate(4)</div><div class=\"line\">                .order(java.nio.ByteOrder.LITTLE_ENDIAN)</div><div class=\"line\">                .putInt(data.length)</div><div class=\"line\">                .array();</div><div class=\"line\">        ByteArrayOutputStream os = new ByteArrayOutputStream(data.length);</div><div class=\"line\">//        os.write(new byte[]&#123;0x05, 0, 0, 0&#125;,0,4);</div><div class=\"line\">        GZIPOutputStream gos = new GZIPOutputStream(os);</div><div class=\"line\">        gos.write(data);</div><div class=\"line\">        gos.close();</div><div class=\"line\">        os.close();</div><div class=\"line\">        byte[] compressed = new byte[4 + os.toByteArray().length];</div><div class=\"line\">        System.arraycopy(blockcopy, 0, compressed, 0, 4);</div><div class=\"line\">        System.arraycopy(os.toByteArray(), 0, compressed, 4,</div><div class=\"line\">                os.toByteArray().length);</div><div class=\"line\">        byte[] result1= Base64.encode(compressed,Base64.DEFAULT);</div><div class=\"line\">        <span class=\"built_in\">return</span> new String (result1);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static String decompress1(String zipText) throws IOException &#123;</div><div class=\"line\">        byte[] compressed = Base64.decode(zipText,Base64.DEFAULT);</div><div class=\"line\">        <span class=\"keyword\">if</span> (compressed.length &gt; 4)</div><div class=\"line\">        &#123;</div><div class=\"line\">            GZIPInputStream gzipInputStream = new GZIPInputStream(</div><div class=\"line\">                    new ByteArrayInputStream(compressed, 4,</div><div class=\"line\">                            compressed.length - 4));</div><div class=\"line\"></div><div class=\"line\">            ByteArrayOutputStream baos = new ByteArrayOutputStream();</div><div class=\"line\">            <span class=\"keyword\">for</span> (int value = 0; value != -1;) &#123;</div><div class=\"line\">                value = gzipInputStream.read();</div><div class=\"line\">                <span class=\"keyword\">if</span> (value != -1) &#123;</div><div class=\"line\">                    baos.write(value);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            gzipInputStream.close();</div><div class=\"line\">            baos.close();</div><div class=\"line\">            String sReturn = new String(baos.toByteArray(), <span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">            <span class=\"built_in\">return</span> sReturn;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>.Net<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\">using System.IO;</div><div class=\"line\">using System.IO.Compression;</div><div class=\"line\">using System.Text;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">namespace GZIPService</div><div class=\"line\">&#123;</div><div class=\"line\">    public class ZipHelper</div><div class=\"line\">    &#123;</div><div class=\"line\">        public static string compress(string text)</div><div class=\"line\">        &#123;</div><div class=\"line\">            byte[] buffer = Encoding.UTF8.GetBytes(text);</div><div class=\"line\">            MemoryStream ms = new MemoryStream();</div><div class=\"line\">            using (GZipStream zip = new GZipStream(ms, CompressionMode.Compress, <span class=\"literal\">true</span>))</div><div class=\"line\">            &#123;</div><div class=\"line\">                zip.Write(buffer, 0, buffer.Length);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            ms.Position = 0;</div><div class=\"line\">            MemoryStream outStream = new MemoryStream();</div><div class=\"line\"></div><div class=\"line\">            byte[] compressed = new byte[ms.Length];</div><div class=\"line\">            ms.Read(compressed, 0, compressed.Length);</div><div class=\"line\"></div><div class=\"line\">            byte[] gzBuffer = new byte[compressed.Length + 4];</div><div class=\"line\">            System.Buffer.BlockCopy(compressed, 0, gzBuffer, 4, compressed.Length);</div><div class=\"line\">            System.Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length), 0, gzBuffer, 0, 4);</div><div class=\"line\">            <span class=\"built_in\">return</span> Convert.ToBase64String(gzBuffer);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public static string decompress(string compressedText)</div><div class=\"line\">        &#123;</div><div class=\"line\">            byte[] gzBuffer = Convert.FromBase64String(compressedText);</div><div class=\"line\">            using (MemoryStream ms = new MemoryStream())</div><div class=\"line\">            &#123;</div><div class=\"line\">                int msgLength = BitConverter.ToInt32(gzBuffer, 0);</div><div class=\"line\">                ms.Write(gzBuffer, 4, gzBuffer.Length - 4);</div><div class=\"line\"></div><div class=\"line\">                byte[] buffer = new byte[msgLength];</div><div class=\"line\"></div><div class=\"line\">                ms.Position = 0;</div><div class=\"line\">                using (GZipStream zip = new GZipStream(ms, CompressionMode.Decompress))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    zip.Read(buffer, 0, buffer.Length);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"built_in\">return</span> Encoding.UTF8.GetString(buffer);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"c#基础-扩展方法","date":"2016-09-12T14:58:48.000Z","_content":"## 扩展方法的讲解\nC#扩展方法，爱你在心口难开\n转自[无风听海](http://www.cnblogs.com/wufengtinghai/archive/2011/08/05/2128110.html) \n\n<!--more-->\n什么是扩展方法?好几天了打算记录一下，今天我们来深入研究一下，探究一下扩展方法的实现机制；那么到底什么是扩展方法呢？\n扩展方法使您能够向现有类型“添加”方法，而无需创建新的派生类型、重新编译或以其他方式修改原始类型。扩展方法是一种特殊的静态方法，但可以像扩展类型上的实例方法一样进行调用。对于用 C# 和 Visual Basic 编写的客户端代码，调用扩展方法与调用在类型中实际定义的方法之间没有明显的差异。\n也许你并不明白以上的意思，那一点都没有关系，如果我们平时一定经常使用linq标准查询，那么我们就一直在使用扩展方法啦！\n微软为枚举的集合扩展了很多的标准查询方法，极大的方便了我们的使用！请看下面的例子没有使用扩展方法\n\n   \n\t\n\t``` bash\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing wuFengTingHai.Person;\n\nnamespace ExtendMethod\n{\n    public class LinqExtend\n    {\n        private IList<Person> persons = new List<Person>();\n        public IList<Person> Persons\n        {\n            get {\n                //删除集合中名称为无风听海的记录，没有引入system.linq,所以不能使用扩展方法\n                foreach(Person person in this.persons)\n                {\n                    if (person.Name.Equals(\"无风听海\"))\n                    {\n                        this.persons.Remove(person);\n                    }\n                }                \n                return this.persons;\n            }\n            set { this.persons = value; }\n        }        \n    }   \n}\n\t```\n\t\n使用扩展方法\n\t\n\t``` bash\n\tusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace wuFengTingHai.Person.Extend\n{\n    public class LinqExtend\n    {\n        private IList<Person> persons = new List<Person>();\n        public IList<Person> Persons\n        {\n            get\n            {\n                //删除集合中名称为无风听海的记录，引入system.linq的扩展方法\n                this.persons = this.persons.Where(m => !m.Name.Equals(\"无风听海\")).ToList<Person>();\n                return this.persons;\n            }\n            set { this.persons = value; }\n        }\n    }\n}\n\t```\n引入system.linq后,扩展方法的智能提示\n 从上面的例子中我们可以学到扩展方法的使用方法。那么扩展方法是怎么定义的呢？查看一下Where扩展方法的定义  \n\n``` bash\n #region Assembly System.Core.dll, v2.0.50727\n// C:\\Program Files\\Reference Assemblies\\Microsoft\\Framework\\v3.5\\System.Core.dll\n#endregion\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Runtime.CompilerServices;\n\nnamespace System.Linq\n{    \n    //为了方便展示，将其他的扩展方法进行了删除精简\n    public static class Enumerable\n    {\n        public static IEnumerable<TSource> Where<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);\n\n        public static IEnumerable<TSource> Where<TSource>(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate);\n    }\n}\n``` \n  虽然扩展方法通过实例方法语法进行调用的，但是他们却被定义为静态方法。从定义中我们可以看到，它们的第一个参数指定该方法作用于哪个类型，并且该参数以 this 修饰符为前缀。\n\n    下面我们自己定义一个Person类和PersonExtend类来扩展方法，来看看编译器究竟做了什么！\n\t``` bash\n\tusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace wuFengTingHai.Person\n{\n    public class Person\n    {\n        public Person(string name,string sex,string age)\n        {\n            this.name = name;\n            this.sex = sex;\n            this.age = age;\n        }\n\n        private string name;\n        public string Name\n        {\n            set { this.name = value; }\n            get { return this.name; }\n        }\n\n        private string sex;\n        public string Sex\n        {\n            set { this.sex = value; }\n            get { return this.sex; }\n        }\n\n        private string age;\n        public string Age\n        {\n            set { this.age = value; }\n            get { return this.age; }\n        }\n\n         public override string  ToString()\n        {\n            return string.Format(\"{0}\",\"类本身的方法覆盖了同名扩展方法\");\n        }            \n\n    }\n}\n\t\n\t```\n\t PersonExtend，对Person类进行方法扩展\n\t \n\t \n\t \n\t \n\t ``` bash\n\t using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace wuFengTingHai.Person.Extend\n{\n     public static  class PersonExtend\n    {\n         public static string  GetDescription(this Person person,string msg)\n         {             \n             return string.Format(\"{0}      我是{1},性别{2},今年{3}岁\",msg,person.Name,person.Sex,person.Age);\n         }\n        \n    }\n}\n\t ```\n\t 客户端调用结果\n\t \n\t 让我们看一下客户端main方法的IL代码，我们就知道编译器到底干什么了！\n\t ``` bash \n\t .method private hidebysig static void  Main(string[] args) cil managed\n{\n  .entrypoint\n  // Code size       63 (0x3f)\n  .maxstack  4\n  .locals init ([0] class [wuFengTingHai.Person]wuFengTingHai.Person.Person person)\n  IL_0000:  nop\n  IL_0001:  ldstr      bytearray (E0 65 CE 98 2C 54 77 6D )                         // .e..,Twm\n  IL_0006:  ldstr      bytearray (37 75 )                                           // 7u\n  IL_000b:  ldstr      \"20\"\n  IL_0010:  newobj     instance void [wuFengTingHai.Person]wuFengTingHai.Person.Person::.ctor(string,\n                                                                                              string,\n                                                                                              string)\n  IL_0015:  stloc.0\n  IL_0016:  ldloc.0\n  IL_0017:  ldstr      bytearray (F4 76 A5 63 1A 90 C7 8F 59 97 01 60 7B 7C 50 00   // .v.c....Y..`{|P.\n                                  65 00 72 00 73 00 6F 00 6E 00 45 00 78 00 74 00   // e.r.s.o.n.E.x.t.\n                                  65 00 6E 00 64 00 03 8C 28 75 2C 00 )             // e.n.d...(u,.\n                       //直接使用静态类PersonExtend调用\n  IL_001c:  call       string [wuFengTingHai.Person.Extend]wuFengTingHai.Person.Extend.PersonExtend::GetDescription(class [wuFengTingHai.Person]wuFengTingHai.Person.Person,\n                                                                                                                    string)\n  IL_0021:  call       void [mscorlib]System.Console::WriteLine(string)\n  IL_0026:  nop\n  IL_0027:  ldloc.0\n  IL_0028:  ldstr      bytearray (F4 76 A5 63 1A 90 C7 8F 50 00 65 00 72 00 73 00   // .v.c....P.e.r.s.\n                                  6F 00 6E 00 84 76 9E 5B 8B 4F 03 8C 28 75 2C 00 ) // o.n..v.[.O..(u,.\n                       //直接使用Person的扩展方法调用\n  IL_002d:  call       string [wuFengTingHai.Person.Extend]wuFengTingHai.Person.Extend.PersonExtend::GetDescription(class [wuFengTingHai.Person]wuFengTingHai.Person.Person,\n                                                                                                                    string)\n  IL_0032:  call       void [mscorlib]System.Console::WriteLine(string)\n  IL_0037:  nop\n  IL_0038:  call       string [mscorlib]System.Console::ReadLine()\n  IL_003d:  pop\n  IL_003e:  ret\n} // end of method Program::Main\n\t \n\t ```\n\t \n\t 从IL中我们可以看到扩展方法与其扩展的类之间并没有什么本质的联系，只是编译器跟我们玩的把戏罢了，最终编译器还是将扩展方法转化成静态类的静态方法调用，所以扩展方法不能访问相应类的私有字段和私有方法；至于为什么使用静态类的静态方法，我考虑可能是这样效率相对较高，同时扩展方法作为其他类的扩展，本身类的实例化没有什么意义；     \n\n      如果扩展方法和被扩展类中的方法相同，会怎么样？\n\t  \n\t  ``` bash\n\t  using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace wuFengTingHai.Person.Extend\n{\n     public static  class PersonExtend\n    {\n         public static string  GetDescription(this Person person,string msg)\n         {             \n             return string.Format(\"{0}      我是{1},性别{2},今年{3}岁\",msg,person.Name,person.Sex,person.Age);\n         }\n\n       \n         public static string ToString(this Person person)\n         {\n             return \"扩展方法能够覆盖原始类的同名方法\";\n         }\n    }\n}\n\t  \n\t  ```\n\t  客户端调用代码\n\t  \n\t  ``` bash\n\t  using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing wuFengTingHai.Person.Extend;\nnamespace ExtendMethod\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {            \n            wuFengTingHai.Person.Person person = new wuFengTingHai.Person.Person(\"无风听海\", \"男\", \"20\");\n            //Console.WriteLine(wuFengTingHai.Person.Extend.PersonExtend.GetDescription(person, \"直接通过静态类PersonExtend调用,\"));\n            //Console.WriteLine(person.GetDescription(\"直接通过Person的实例调用,\"));\n            Console.WriteLine(person.ToString());\n           \n\n            Console.ReadLine();\n        }\n    }\n}\n\t  ```\n\t  \n调用结果\n\n   \n\n以上我们可以看到编译时，扩展方法的优先级总是比类型本身中定义的实例方法低，所以与接口或类方法具有相同名称和签名的扩展方法永远不会被调用。\n\n综上进行总结\n  扩展方法不改变被扩展类的代码，不用重新编译、修改、派生被扩展类\n  扩展方法不能访问被扩展类的私有成员\n  扩展方法会被被扩展类的同名方法覆盖，所以实现扩展方法我们需要承担随时被覆盖的风险\n  扩展方法看似实现了面向对象中扩展对修改说不的特性，但是也违背了面向对象的继承原则，被扩展类的派生类是不能继承扩展扩展方法的，从而又违背了面向对象的多态性。\n  在我们稳定的引用同一个版本的类库，但是我们没有该类库的源代码，那么我们可以使用扩展方法；但是从项目的可扩展、可维护和版本控制方面来说，都不建议\n\n  使用扩展方法进行类的扩展。","source":"_posts/c-基础-扩展方法.md","raw":"---\ntitle: 'c#基础-扩展方法'\ndate: 2016-09-12 22:58:48\ncategories: \n- c#基础\ntags:\n- 扩展方法\n\n---\n## 扩展方法的讲解\nC#扩展方法，爱你在心口难开\n转自[无风听海](http://www.cnblogs.com/wufengtinghai/archive/2011/08/05/2128110.html) \n\n<!--more-->\n什么是扩展方法?好几天了打算记录一下，今天我们来深入研究一下，探究一下扩展方法的实现机制；那么到底什么是扩展方法呢？\n扩展方法使您能够向现有类型“添加”方法，而无需创建新的派生类型、重新编译或以其他方式修改原始类型。扩展方法是一种特殊的静态方法，但可以像扩展类型上的实例方法一样进行调用。对于用 C# 和 Visual Basic 编写的客户端代码，调用扩展方法与调用在类型中实际定义的方法之间没有明显的差异。\n也许你并不明白以上的意思，那一点都没有关系，如果我们平时一定经常使用linq标准查询，那么我们就一直在使用扩展方法啦！\n微软为枚举的集合扩展了很多的标准查询方法，极大的方便了我们的使用！请看下面的例子没有使用扩展方法\n\n   \n\t\n\t``` bash\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing wuFengTingHai.Person;\n\nnamespace ExtendMethod\n{\n    public class LinqExtend\n    {\n        private IList<Person> persons = new List<Person>();\n        public IList<Person> Persons\n        {\n            get {\n                //删除集合中名称为无风听海的记录，没有引入system.linq,所以不能使用扩展方法\n                foreach(Person person in this.persons)\n                {\n                    if (person.Name.Equals(\"无风听海\"))\n                    {\n                        this.persons.Remove(person);\n                    }\n                }                \n                return this.persons;\n            }\n            set { this.persons = value; }\n        }        \n    }   \n}\n\t```\n\t\n使用扩展方法\n\t\n\t``` bash\n\tusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace wuFengTingHai.Person.Extend\n{\n    public class LinqExtend\n    {\n        private IList<Person> persons = new List<Person>();\n        public IList<Person> Persons\n        {\n            get\n            {\n                //删除集合中名称为无风听海的记录，引入system.linq的扩展方法\n                this.persons = this.persons.Where(m => !m.Name.Equals(\"无风听海\")).ToList<Person>();\n                return this.persons;\n            }\n            set { this.persons = value; }\n        }\n    }\n}\n\t```\n引入system.linq后,扩展方法的智能提示\n 从上面的例子中我们可以学到扩展方法的使用方法。那么扩展方法是怎么定义的呢？查看一下Where扩展方法的定义  \n\n``` bash\n #region Assembly System.Core.dll, v2.0.50727\n// C:\\Program Files\\Reference Assemblies\\Microsoft\\Framework\\v3.5\\System.Core.dll\n#endregion\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Runtime.CompilerServices;\n\nnamespace System.Linq\n{    \n    //为了方便展示，将其他的扩展方法进行了删除精简\n    public static class Enumerable\n    {\n        public static IEnumerable<TSource> Where<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate);\n\n        public static IEnumerable<TSource> Where<TSource>(this IEnumerable<TSource> source, Func<TSource, int, bool> predicate);\n    }\n}\n``` \n  虽然扩展方法通过实例方法语法进行调用的，但是他们却被定义为静态方法。从定义中我们可以看到，它们的第一个参数指定该方法作用于哪个类型，并且该参数以 this 修饰符为前缀。\n\n    下面我们自己定义一个Person类和PersonExtend类来扩展方法，来看看编译器究竟做了什么！\n\t``` bash\n\tusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace wuFengTingHai.Person\n{\n    public class Person\n    {\n        public Person(string name,string sex,string age)\n        {\n            this.name = name;\n            this.sex = sex;\n            this.age = age;\n        }\n\n        private string name;\n        public string Name\n        {\n            set { this.name = value; }\n            get { return this.name; }\n        }\n\n        private string sex;\n        public string Sex\n        {\n            set { this.sex = value; }\n            get { return this.sex; }\n        }\n\n        private string age;\n        public string Age\n        {\n            set { this.age = value; }\n            get { return this.age; }\n        }\n\n         public override string  ToString()\n        {\n            return string.Format(\"{0}\",\"类本身的方法覆盖了同名扩展方法\");\n        }            \n\n    }\n}\n\t\n\t```\n\t PersonExtend，对Person类进行方法扩展\n\t \n\t \n\t \n\t \n\t ``` bash\n\t using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace wuFengTingHai.Person.Extend\n{\n     public static  class PersonExtend\n    {\n         public static string  GetDescription(this Person person,string msg)\n         {             \n             return string.Format(\"{0}      我是{1},性别{2},今年{3}岁\",msg,person.Name,person.Sex,person.Age);\n         }\n        \n    }\n}\n\t ```\n\t 客户端调用结果\n\t \n\t 让我们看一下客户端main方法的IL代码，我们就知道编译器到底干什么了！\n\t ``` bash \n\t .method private hidebysig static void  Main(string[] args) cil managed\n{\n  .entrypoint\n  // Code size       63 (0x3f)\n  .maxstack  4\n  .locals init ([0] class [wuFengTingHai.Person]wuFengTingHai.Person.Person person)\n  IL_0000:  nop\n  IL_0001:  ldstr      bytearray (E0 65 CE 98 2C 54 77 6D )                         // .e..,Twm\n  IL_0006:  ldstr      bytearray (37 75 )                                           // 7u\n  IL_000b:  ldstr      \"20\"\n  IL_0010:  newobj     instance void [wuFengTingHai.Person]wuFengTingHai.Person.Person::.ctor(string,\n                                                                                              string,\n                                                                                              string)\n  IL_0015:  stloc.0\n  IL_0016:  ldloc.0\n  IL_0017:  ldstr      bytearray (F4 76 A5 63 1A 90 C7 8F 59 97 01 60 7B 7C 50 00   // .v.c....Y..`{|P.\n                                  65 00 72 00 73 00 6F 00 6E 00 45 00 78 00 74 00   // e.r.s.o.n.E.x.t.\n                                  65 00 6E 00 64 00 03 8C 28 75 2C 00 )             // e.n.d...(u,.\n                       //直接使用静态类PersonExtend调用\n  IL_001c:  call       string [wuFengTingHai.Person.Extend]wuFengTingHai.Person.Extend.PersonExtend::GetDescription(class [wuFengTingHai.Person]wuFengTingHai.Person.Person,\n                                                                                                                    string)\n  IL_0021:  call       void [mscorlib]System.Console::WriteLine(string)\n  IL_0026:  nop\n  IL_0027:  ldloc.0\n  IL_0028:  ldstr      bytearray (F4 76 A5 63 1A 90 C7 8F 50 00 65 00 72 00 73 00   // .v.c....P.e.r.s.\n                                  6F 00 6E 00 84 76 9E 5B 8B 4F 03 8C 28 75 2C 00 ) // o.n..v.[.O..(u,.\n                       //直接使用Person的扩展方法调用\n  IL_002d:  call       string [wuFengTingHai.Person.Extend]wuFengTingHai.Person.Extend.PersonExtend::GetDescription(class [wuFengTingHai.Person]wuFengTingHai.Person.Person,\n                                                                                                                    string)\n  IL_0032:  call       void [mscorlib]System.Console::WriteLine(string)\n  IL_0037:  nop\n  IL_0038:  call       string [mscorlib]System.Console::ReadLine()\n  IL_003d:  pop\n  IL_003e:  ret\n} // end of method Program::Main\n\t \n\t ```\n\t \n\t 从IL中我们可以看到扩展方法与其扩展的类之间并没有什么本质的联系，只是编译器跟我们玩的把戏罢了，最终编译器还是将扩展方法转化成静态类的静态方法调用，所以扩展方法不能访问相应类的私有字段和私有方法；至于为什么使用静态类的静态方法，我考虑可能是这样效率相对较高，同时扩展方法作为其他类的扩展，本身类的实例化没有什么意义；     \n\n      如果扩展方法和被扩展类中的方法相同，会怎么样？\n\t  \n\t  ``` bash\n\t  using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace wuFengTingHai.Person.Extend\n{\n     public static  class PersonExtend\n    {\n         public static string  GetDescription(this Person person,string msg)\n         {             \n             return string.Format(\"{0}      我是{1},性别{2},今年{3}岁\",msg,person.Name,person.Sex,person.Age);\n         }\n\n       \n         public static string ToString(this Person person)\n         {\n             return \"扩展方法能够覆盖原始类的同名方法\";\n         }\n    }\n}\n\t  \n\t  ```\n\t  客户端调用代码\n\t  \n\t  ``` bash\n\t  using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing wuFengTingHai.Person.Extend;\nnamespace ExtendMethod\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {            \n            wuFengTingHai.Person.Person person = new wuFengTingHai.Person.Person(\"无风听海\", \"男\", \"20\");\n            //Console.WriteLine(wuFengTingHai.Person.Extend.PersonExtend.GetDescription(person, \"直接通过静态类PersonExtend调用,\"));\n            //Console.WriteLine(person.GetDescription(\"直接通过Person的实例调用,\"));\n            Console.WriteLine(person.ToString());\n           \n\n            Console.ReadLine();\n        }\n    }\n}\n\t  ```\n\t  \n调用结果\n\n   \n\n以上我们可以看到编译时，扩展方法的优先级总是比类型本身中定义的实例方法低，所以与接口或类方法具有相同名称和签名的扩展方法永远不会被调用。\n\n综上进行总结\n  扩展方法不改变被扩展类的代码，不用重新编译、修改、派生被扩展类\n  扩展方法不能访问被扩展类的私有成员\n  扩展方法会被被扩展类的同名方法覆盖，所以实现扩展方法我们需要承担随时被覆盖的风险\n  扩展方法看似实现了面向对象中扩展对修改说不的特性，但是也违背了面向对象的继承原则，被扩展类的派生类是不能继承扩展扩展方法的，从而又违背了面向对象的多态性。\n  在我们稳定的引用同一个版本的类库，但是我们没有该类库的源代码，那么我们可以使用扩展方法；但是从项目的可扩展、可维护和版本控制方面来说，都不建议\n\n  使用扩展方法进行类的扩展。","slug":"c-基础-扩展方法","published":1,"updated":"2016-10-14T07:46:44.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu9hd7980006xs8xlcgktuys","content":"<h2 id=\"扩展方法的讲解\"><a href=\"#扩展方法的讲解\" class=\"headerlink\" title=\"扩展方法的讲解\"></a>扩展方法的讲解</h2><p>C#扩展方法，爱你在心口难开<br>转自<a href=\"http://www.cnblogs.com/wufengtinghai/archive/2011/08/05/2128110.html\" target=\"_blank\" rel=\"external\">无风听海</a> </p>\n<a id=\"more\"></a>\n<p>什么是扩展方法?好几天了打算记录一下，今天我们来深入研究一下，探究一下扩展方法的实现机制；那么到底什么是扩展方法呢？<br>扩展方法使您能够向现有类型“添加”方法，而无需创建新的派生类型、重新编译或以其他方式修改原始类型。扩展方法是一种特殊的静态方法，但可以像扩展类型上的实例方法一样进行调用。对于用 C# 和 Visual Basic 编写的客户端代码，调用扩展方法与调用在类型中实际定义的方法之间没有明显的差异。<br>也许你并不明白以上的意思，那一点都没有关系，如果我们平时一定经常使用linq标准查询，那么我们就一直在使用扩展方法啦！<br>微软为枚举的集合扩展了很多的标准查询方法，极大的方便了我们的使用！请看下面的例子没有使用扩展方法</p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Text;</div><div class=\"line\">using wuFengTingHai.Person;</div><div class=\"line\"></div><div class=\"line\">namespace ExtendMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    public class LinqExtend</div><div class=\"line\">    &#123;</div><div class=\"line\">        private IList&lt;Person&gt; persons = new List&lt;Person&gt;();</div><div class=\"line\">        public IList&lt;Person&gt; Persons</div><div class=\"line\">        &#123;</div><div class=\"line\">            get &#123;</div><div class=\"line\">                //删除集合中名称为无风听海的记录，没有引入system.linq,所以不能使用扩展方法</div><div class=\"line\">                foreach(Person person <span class=\"keyword\">in</span> this.persons)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (person.Name.Equals(<span class=\"string\">\"无风听海\"</span>))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        this.persons.Remove(person);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;                </div><div class=\"line\">                <span class=\"built_in\">return</span> this.persons;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">set</span> &#123; this.persons = value; &#125;</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><p>使用扩展方法</p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tusing System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Text;</div><div class=\"line\"></div><div class=\"line\">namespace wuFengTingHai.Person.Extend</div><div class=\"line\">&#123;</div><div class=\"line\">    public class LinqExtend</div><div class=\"line\">    &#123;</div><div class=\"line\">        private IList&lt;Person&gt; persons = new List&lt;Person&gt;();</div><div class=\"line\">        public IList&lt;Person&gt; Persons</div><div class=\"line\">        &#123;</div><div class=\"line\">            get</div><div class=\"line\">            &#123;</div><div class=\"line\">                //删除集合中名称为无风听海的记录，引入system.linq的扩展方法</div><div class=\"line\">                this.persons = this.persons.Where(m =&gt; !m.Name.Equals(<span class=\"string\">\"无风听海\"</span>)).ToList&lt;Person&gt;();</div><div class=\"line\">                <span class=\"built_in\">return</span> this.persons;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">set</span> &#123; this.persons = value; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><p>引入system.linq后,扩展方法的智能提示<br> 从上面的例子中我们可以学到扩展方法的使用方法。那么扩展方法是怎么定义的呢？查看一下Where扩展方法的定义  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">#region Assembly System.Core.dll, v2.0.50727</span></div><div class=\"line\">// C:\\Program Files\\Reference Assemblies\\Microsoft\\Framework\\v3.5\\System.Core.dll</div><div class=\"line\"><span class=\"comment\">#endregion</span></div><div class=\"line\"></div><div class=\"line\">using System;</div><div class=\"line\">using System.Collections;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Runtime.CompilerServices;</div><div class=\"line\"></div><div class=\"line\">namespace System.Linq</div><div class=\"line\">&#123;    </div><div class=\"line\">    //为了方便展示，将其他的扩展方法进行了删除精简</div><div class=\"line\">    public static class Enumerable</div><div class=\"line\">    &#123;</div><div class=\"line\">        public static IEnumerable&lt;TSource&gt; Where&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; <span class=\"built_in\">source</span>, Func&lt;TSource, bool&gt; predicate);</div><div class=\"line\"></div><div class=\"line\">        public static IEnumerable&lt;TSource&gt; Where&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; <span class=\"built_in\">source</span>, Func&lt;TSource, int, bool&gt; predicate);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\">  虽然扩展方法通过实例方法语法进行调用的，但是他们却被定义为静态方法。从定义中我们可以看到，它们的第一个参数指定该方法作用于哪个类型，并且该参数以 this 修饰符为前缀。</div><div class=\"line\"></div><div class=\"line\">    下面我们自己定义一个Person类和PersonExtend类来扩展方法，来看看编译器究竟做了什么！</div><div class=\"line\">\t``` bash</div><div class=\"line\">\tusing System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Text;</div><div class=\"line\"></div><div class=\"line\">namespace wuFengTingHai.Person</div><div class=\"line\">&#123;</div><div class=\"line\">    public class Person</div><div class=\"line\">    &#123;</div><div class=\"line\">        public Person(string name,string sex,string age)</div><div class=\"line\">        &#123;</div><div class=\"line\">            this.name = name;</div><div class=\"line\">            this.sex = sex;</div><div class=\"line\">            this.age = age;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        private string name;</div><div class=\"line\">        public string Name</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">set</span> &#123; this.name = value; &#125;</div><div class=\"line\">            get &#123; <span class=\"built_in\">return</span> this.name; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        private string sex;</div><div class=\"line\">        public string Sex</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">set</span> &#123; this.sex = value; &#125;</div><div class=\"line\">            get &#123; <span class=\"built_in\">return</span> this.sex; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        private string age;</div><div class=\"line\">        public string Age</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">set</span> &#123; this.age = value; &#125;</div><div class=\"line\">            get &#123; <span class=\"built_in\">return</span> this.age; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">         public override string  <span class=\"function\"><span class=\"title\">ToString</span></span>()</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">return</span> string.Format(<span class=\"string\">\"&#123;0&#125;\"</span>,<span class=\"string\">\"类本身的方法覆盖了同名扩展方法\"</span>);</div><div class=\"line\">        &#125;            </div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>PersonExtend，对Person类进行方法扩展\n\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Text;</div><div class=\"line\"></div><div class=\"line\">namespace wuFengTingHai.Person.Extend</div><div class=\"line\">&#123;</div><div class=\"line\">     public static  class PersonExtend</div><div class=\"line\">    &#123;</div><div class=\"line\">         public static string  GetDescription(this Person person,string msg)</div><div class=\"line\">         &#123;             </div><div class=\"line\">             <span class=\"built_in\">return</span> string.Format(<span class=\"string\">\"&#123;0&#125;      我是&#123;1&#125;,性别&#123;2&#125;,今年&#123;3&#125;岁\"</span>,msg,person.Name,person.Sex,person.Age);</div><div class=\"line\">         &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n客户端调用结果\n\n让我们看一下客户端main方法的IL代码，我们就知道编译器到底干什么了！\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t .method private hidebysig static void  Main(string[] args) cil managed</div><div class=\"line\">&#123;</div><div class=\"line\">  .entrypoint</div><div class=\"line\">  // Code size       63 (0x3f)</div><div class=\"line\">  .maxstack  4</div><div class=\"line\">  .locals init ([0] class [wuFengTingHai.Person]wuFengTingHai.Person.Person person)</div><div class=\"line\">  IL_0000:  nop</div><div class=\"line\">  IL_0001:  ldstr      bytearray (E0 65 CE 98 2C 54 77 6D )                         // .e..,Twm</div><div class=\"line\">  IL_0006:  ldstr      bytearray (37 75 )                                           // 7u</div><div class=\"line\">  IL_000b:  ldstr      <span class=\"string\">\"20\"</span></div><div class=\"line\">  IL_0010:  newobj     instance void [wuFengTingHai.Person]wuFengTingHai.Person.Person::.ctor(string,</div><div class=\"line\">                                                                                              string,</div><div class=\"line\">                                                                                              string)</div><div class=\"line\">  IL_0015:  stloc.0</div><div class=\"line\">  IL_0016:  ldloc.0</div><div class=\"line\">  IL_0017:  ldstr      bytearray (F4 76 A5 63 1A 90 C7 8F 59 97 01 60 7B 7C 50 00   // .v.c....Y..`&#123;|P.</div><div class=\"line\">                                  65 00 72 00 73 00 6F 00 6E 00 45 00 78 00 74 00   // e.r.s.o.n.E.x.t.</div><div class=\"line\">                                  65 00 6E 00 64 00 03 8C 28 75 2C 00 )             // e.n.d...(u,.</div><div class=\"line\">                       //直接使用静态类PersonExtend调用</div><div class=\"line\">  IL_001c:  call       string [wuFengTingHai.Person.Extend]wuFengTingHai.Person.Extend.PersonExtend::GetDescription(class [wuFengTingHai.Person]wuFengTingHai.Person.Person,</div><div class=\"line\">                                                                                                                    string)</div><div class=\"line\">  IL_0021:  call       void [mscorlib]System.Console::WriteLine(string)</div><div class=\"line\">  IL_0026:  nop</div><div class=\"line\">  IL_0027:  ldloc.0</div><div class=\"line\">  IL_0028:  ldstr      bytearray (F4 76 A5 63 1A 90 C7 8F 50 00 65 00 72 00 73 00   // .v.c....P.e.r.s.</div><div class=\"line\">                                  6F 00 6E 00 84 76 9E 5B 8B 4F 03 8C 28 75 2C 00 ) // o.n..v.[.O..(u,.</div><div class=\"line\">                       //直接使用Person的扩展方法调用</div><div class=\"line\">  IL_002d:  call       string [wuFengTingHai.Person.Extend]wuFengTingHai.Person.Extend.PersonExtend::GetDescription(class [wuFengTingHai.Person]wuFengTingHai.Person.Person,</div><div class=\"line\">                                                                                                                    string)</div><div class=\"line\">  IL_0032:  call       void [mscorlib]System.Console::WriteLine(string)</div><div class=\"line\">  IL_0037:  nop</div><div class=\"line\">  IL_0038:  call       string [mscorlib]System.Console::ReadLine()</div><div class=\"line\">  IL_003d:  pop</div><div class=\"line\">  IL_003e:  ret</div><div class=\"line\">&#125; // end of method Program::Main</div></pre></td></tr></table></figure>\n\n\n从IL中我们可以看到扩展方法与其扩展的类之间并没有什么本质的联系，只是编译器跟我们玩的把戏罢了，最终编译器还是将扩展方法转化成静态类的静态方法调用，所以扩展方法不能访问相应类的私有字段和私有方法；至于为什么使用静态类的静态方法，我考虑可能是这样效率相对较高，同时扩展方法作为其他类的扩展，本身类的实例化没有什么意义；     \n\n 如果扩展方法和被扩展类中的方法相同，会怎么样？\n\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t  using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Text;</div><div class=\"line\"></div><div class=\"line\">namespace wuFengTingHai.Person.Extend</div><div class=\"line\">&#123;</div><div class=\"line\">     public static  class PersonExtend</div><div class=\"line\">    &#123;</div><div class=\"line\">         public static string  GetDescription(this Person person,string msg)</div><div class=\"line\">         &#123;             </div><div class=\"line\">             <span class=\"built_in\">return</span> string.Format(<span class=\"string\">\"&#123;0&#125;      我是&#123;1&#125;,性别&#123;2&#125;,今年&#123;3&#125;岁\"</span>,msg,person.Name,person.Sex,person.Age);</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">       </div><div class=\"line\">         public static string ToString(this Person person)</div><div class=\"line\">         &#123;</div><div class=\"line\">             <span class=\"built_in\">return</span> <span class=\"string\">\"扩展方法能够覆盖原始类的同名方法\"</span>;</div><div class=\"line\">         &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n 客户端调用代码\n\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t  using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Text;</div><div class=\"line\">using wuFengTingHai.Person.Extend;</div><div class=\"line\">namespace ExtendMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    class Program</div><div class=\"line\">    &#123;</div><div class=\"line\">        static void Main(string[] args)</div><div class=\"line\">        &#123;            </div><div class=\"line\">            wuFengTingHai.Person.Person person = new wuFengTingHai.Person.Person(<span class=\"string\">\"无风听海\"</span>, <span class=\"string\">\"男\"</span>, <span class=\"string\">\"20\"</span>);</div><div class=\"line\">            //Console.WriteLine(wuFengTingHai.Person.Extend.PersonExtend.GetDescription(person, <span class=\"string\">\"直接通过静态类PersonExtend调用,\"</span>));</div><div class=\"line\">            //Console.WriteLine(person.GetDescription(<span class=\"string\">\"直接通过Person的实例调用,\"</span>));</div><div class=\"line\">            Console.WriteLine(person.ToString());</div><div class=\"line\">           </div><div class=\"line\"></div><div class=\"line\">            Console.ReadLine();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><p>调用结果</p>\n<p>以上我们可以看到编译时，扩展方法的优先级总是比类型本身中定义的实例方法低，所以与接口或类方法具有相同名称和签名的扩展方法永远不会被调用。</p>\n<p>综上进行总结<br>  扩展方法不改变被扩展类的代码，不用重新编译、修改、派生被扩展类<br>  扩展方法不能访问被扩展类的私有成员<br>  扩展方法会被被扩展类的同名方法覆盖，所以实现扩展方法我们需要承担随时被覆盖的风险<br>  扩展方法看似实现了面向对象中扩展对修改说不的特性，但是也违背了面向对象的继承原则，被扩展类的派生类是不能继承扩展扩展方法的，从而又违背了面向对象的多态性。<br>  在我们稳定的引用同一个版本的类库，但是我们没有该类库的源代码，那么我们可以使用扩展方法；但是从项目的可扩展、可维护和版本控制方面来说，都不建议</p>\n<p>  使用扩展方法进行类的扩展。</p>\n","excerpt":"<h2 id=\"扩展方法的讲解\"><a href=\"#扩展方法的讲解\" class=\"headerlink\" title=\"扩展方法的讲解\"></a>扩展方法的讲解</h2><p>C#扩展方法，爱你在心口难开<br>转自<a href=\"http://www.cnblogs.com/wufengtinghai/archive/2011/08/05/2128110.html\">无风听海</a> </p>","more":"<p>什么是扩展方法?好几天了打算记录一下，今天我们来深入研究一下，探究一下扩展方法的实现机制；那么到底什么是扩展方法呢？<br>扩展方法使您能够向现有类型“添加”方法，而无需创建新的派生类型、重新编译或以其他方式修改原始类型。扩展方法是一种特殊的静态方法，但可以像扩展类型上的实例方法一样进行调用。对于用 C# 和 Visual Basic 编写的客户端代码，调用扩展方法与调用在类型中实际定义的方法之间没有明显的差异。<br>也许你并不明白以上的意思，那一点都没有关系，如果我们平时一定经常使用linq标准查询，那么我们就一直在使用扩展方法啦！<br>微软为枚举的集合扩展了很多的标准查询方法，极大的方便了我们的使用！请看下面的例子没有使用扩展方法</p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Text;</div><div class=\"line\">using wuFengTingHai.Person;</div><div class=\"line\"></div><div class=\"line\">namespace ExtendMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    public class LinqExtend</div><div class=\"line\">    &#123;</div><div class=\"line\">        private IList&lt;Person&gt; persons = new List&lt;Person&gt;();</div><div class=\"line\">        public IList&lt;Person&gt; Persons</div><div class=\"line\">        &#123;</div><div class=\"line\">            get &#123;</div><div class=\"line\">                //删除集合中名称为无风听海的记录，没有引入system.linq,所以不能使用扩展方法</div><div class=\"line\">                foreach(Person person <span class=\"keyword\">in</span> this.persons)</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (person.Name.Equals(<span class=\"string\">\"无风听海\"</span>))</div><div class=\"line\">                    &#123;</div><div class=\"line\">                        this.persons.Remove(person);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;                </div><div class=\"line\">                <span class=\"built_in\">return</span> this.persons;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">set</span> &#123; this.persons = value; &#125;</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;   </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><p>使用扩展方法</p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tusing System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Text;</div><div class=\"line\"></div><div class=\"line\">namespace wuFengTingHai.Person.Extend</div><div class=\"line\">&#123;</div><div class=\"line\">    public class LinqExtend</div><div class=\"line\">    &#123;</div><div class=\"line\">        private IList&lt;Person&gt; persons = new List&lt;Person&gt;();</div><div class=\"line\">        public IList&lt;Person&gt; Persons</div><div class=\"line\">        &#123;</div><div class=\"line\">            get</div><div class=\"line\">            &#123;</div><div class=\"line\">                //删除集合中名称为无风听海的记录，引入system.linq的扩展方法</div><div class=\"line\">                this.persons = this.persons.Where(m =&gt; !m.Name.Equals(<span class=\"string\">\"无风听海\"</span>)).ToList&lt;Person&gt;();</div><div class=\"line\">                <span class=\"built_in\">return</span> this.persons;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">set</span> &#123; this.persons = value; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><p>引入system.linq后,扩展方法的智能提示<br> 从上面的例子中我们可以学到扩展方法的使用方法。那么扩展方法是怎么定义的呢？查看一下Where扩展方法的定义  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">#region Assembly System.Core.dll, v2.0.50727</span></div><div class=\"line\">// C:\\Program Files\\Reference Assemblies\\Microsoft\\Framework\\v3.5\\System.Core.dll</div><div class=\"line\"><span class=\"comment\">#endregion</span></div><div class=\"line\"></div><div class=\"line\">using System;</div><div class=\"line\">using System.Collections;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Runtime.CompilerServices;</div><div class=\"line\"></div><div class=\"line\">namespace System.Linq</div><div class=\"line\">&#123;    </div><div class=\"line\">    //为了方便展示，将其他的扩展方法进行了删除精简</div><div class=\"line\">    public static class Enumerable</div><div class=\"line\">    &#123;</div><div class=\"line\">        public static IEnumerable&lt;TSource&gt; Where&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; <span class=\"built_in\">source</span>, Func&lt;TSource, bool&gt; predicate);</div><div class=\"line\"></div><div class=\"line\">        public static IEnumerable&lt;TSource&gt; Where&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; <span class=\"built_in\">source</span>, Func&lt;TSource, int, bool&gt; predicate);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\">  虽然扩展方法通过实例方法语法进行调用的，但是他们却被定义为静态方法。从定义中我们可以看到，它们的第一个参数指定该方法作用于哪个类型，并且该参数以 this 修饰符为前缀。</div><div class=\"line\"></div><div class=\"line\">    下面我们自己定义一个Person类和PersonExtend类来扩展方法，来看看编译器究竟做了什么！</div><div class=\"line\">\t``` bash</div><div class=\"line\">\tusing System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Text;</div><div class=\"line\"></div><div class=\"line\">namespace wuFengTingHai.Person</div><div class=\"line\">&#123;</div><div class=\"line\">    public class Person</div><div class=\"line\">    &#123;</div><div class=\"line\">        public Person(string name,string sex,string age)</div><div class=\"line\">        &#123;</div><div class=\"line\">            this.name = name;</div><div class=\"line\">            this.sex = sex;</div><div class=\"line\">            this.age = age;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        private string name;</div><div class=\"line\">        public string Name</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">set</span> &#123; this.name = value; &#125;</div><div class=\"line\">            get &#123; <span class=\"built_in\">return</span> this.name; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        private string sex;</div><div class=\"line\">        public string Sex</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">set</span> &#123; this.sex = value; &#125;</div><div class=\"line\">            get &#123; <span class=\"built_in\">return</span> this.sex; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        private string age;</div><div class=\"line\">        public string Age</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">set</span> &#123; this.age = value; &#125;</div><div class=\"line\">            get &#123; <span class=\"built_in\">return</span> this.age; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">         public override string  <span class=\"function\"><span class=\"title\">ToString</span></span>()</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"built_in\">return</span> string.Format(<span class=\"string\">\"&#123;0&#125;\"</span>,<span class=\"string\">\"类本身的方法覆盖了同名扩展方法\"</span>);</div><div class=\"line\">        &#125;            </div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>PersonExtend，对Person类进行方法扩展\n\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Text;</div><div class=\"line\"></div><div class=\"line\">namespace wuFengTingHai.Person.Extend</div><div class=\"line\">&#123;</div><div class=\"line\">     public static  class PersonExtend</div><div class=\"line\">    &#123;</div><div class=\"line\">         public static string  GetDescription(this Person person,string msg)</div><div class=\"line\">         &#123;             </div><div class=\"line\">             <span class=\"built_in\">return</span> string.Format(<span class=\"string\">\"&#123;0&#125;      我是&#123;1&#125;,性别&#123;2&#125;,今年&#123;3&#125;岁\"</span>,msg,person.Name,person.Sex,person.Age);</div><div class=\"line\">         &#125;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n客户端调用结果\n\n让我们看一下客户端main方法的IL代码，我们就知道编译器到底干什么了！\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t .method private hidebysig static void  Main(string[] args) cil managed</div><div class=\"line\">&#123;</div><div class=\"line\">  .entrypoint</div><div class=\"line\">  // Code size       63 (0x3f)</div><div class=\"line\">  .maxstack  4</div><div class=\"line\">  .locals init ([0] class [wuFengTingHai.Person]wuFengTingHai.Person.Person person)</div><div class=\"line\">  IL_0000:  nop</div><div class=\"line\">  IL_0001:  ldstr      bytearray (E0 65 CE 98 2C 54 77 6D )                         // .e..,Twm</div><div class=\"line\">  IL_0006:  ldstr      bytearray (37 75 )                                           // 7u</div><div class=\"line\">  IL_000b:  ldstr      <span class=\"string\">\"20\"</span></div><div class=\"line\">  IL_0010:  newobj     instance void [wuFengTingHai.Person]wuFengTingHai.Person.Person::.ctor(string,</div><div class=\"line\">                                                                                              string,</div><div class=\"line\">                                                                                              string)</div><div class=\"line\">  IL_0015:  stloc.0</div><div class=\"line\">  IL_0016:  ldloc.0</div><div class=\"line\">  IL_0017:  ldstr      bytearray (F4 76 A5 63 1A 90 C7 8F 59 97 01 60 7B 7C 50 00   // .v.c....Y..`&#123;|P.</div><div class=\"line\">                                  65 00 72 00 73 00 6F 00 6E 00 45 00 78 00 74 00   // e.r.s.o.n.E.x.t.</div><div class=\"line\">                                  65 00 6E 00 64 00 03 8C 28 75 2C 00 )             // e.n.d...(u,.</div><div class=\"line\">                       //直接使用静态类PersonExtend调用</div><div class=\"line\">  IL_001c:  call       string [wuFengTingHai.Person.Extend]wuFengTingHai.Person.Extend.PersonExtend::GetDescription(class [wuFengTingHai.Person]wuFengTingHai.Person.Person,</div><div class=\"line\">                                                                                                                    string)</div><div class=\"line\">  IL_0021:  call       void [mscorlib]System.Console::WriteLine(string)</div><div class=\"line\">  IL_0026:  nop</div><div class=\"line\">  IL_0027:  ldloc.0</div><div class=\"line\">  IL_0028:  ldstr      bytearray (F4 76 A5 63 1A 90 C7 8F 50 00 65 00 72 00 73 00   // .v.c....P.e.r.s.</div><div class=\"line\">                                  6F 00 6E 00 84 76 9E 5B 8B 4F 03 8C 28 75 2C 00 ) // o.n..v.[.O..(u,.</div><div class=\"line\">                       //直接使用Person的扩展方法调用</div><div class=\"line\">  IL_002d:  call       string [wuFengTingHai.Person.Extend]wuFengTingHai.Person.Extend.PersonExtend::GetDescription(class [wuFengTingHai.Person]wuFengTingHai.Person.Person,</div><div class=\"line\">                                                                                                                    string)</div><div class=\"line\">  IL_0032:  call       void [mscorlib]System.Console::WriteLine(string)</div><div class=\"line\">  IL_0037:  nop</div><div class=\"line\">  IL_0038:  call       string [mscorlib]System.Console::ReadLine()</div><div class=\"line\">  IL_003d:  pop</div><div class=\"line\">  IL_003e:  ret</div><div class=\"line\">&#125; // end of method Program::Main</div></pre></td></tr></table></figure>\n\n\n从IL中我们可以看到扩展方法与其扩展的类之间并没有什么本质的联系，只是编译器跟我们玩的把戏罢了，最终编译器还是将扩展方法转化成静态类的静态方法调用，所以扩展方法不能访问相应类的私有字段和私有方法；至于为什么使用静态类的静态方法，我考虑可能是这样效率相对较高，同时扩展方法作为其他类的扩展，本身类的实例化没有什么意义；     \n\n 如果扩展方法和被扩展类中的方法相同，会怎么样？\n\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t  using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Text;</div><div class=\"line\"></div><div class=\"line\">namespace wuFengTingHai.Person.Extend</div><div class=\"line\">&#123;</div><div class=\"line\">     public static  class PersonExtend</div><div class=\"line\">    &#123;</div><div class=\"line\">         public static string  GetDescription(this Person person,string msg)</div><div class=\"line\">         &#123;             </div><div class=\"line\">             <span class=\"built_in\">return</span> string.Format(<span class=\"string\">\"&#123;0&#125;      我是&#123;1&#125;,性别&#123;2&#125;,今年&#123;3&#125;岁\"</span>,msg,person.Name,person.Sex,person.Age);</div><div class=\"line\">         &#125;</div><div class=\"line\"></div><div class=\"line\">       </div><div class=\"line\">         public static string ToString(this Person person)</div><div class=\"line\">         &#123;</div><div class=\"line\">             <span class=\"built_in\">return</span> <span class=\"string\">\"扩展方法能够覆盖原始类的同名方法\"</span>;</div><div class=\"line\">         &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n\n 客户端调用代码\n\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t  using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Text;</div><div class=\"line\">using wuFengTingHai.Person.Extend;</div><div class=\"line\">namespace ExtendMethod</div><div class=\"line\">&#123;</div><div class=\"line\">    class Program</div><div class=\"line\">    &#123;</div><div class=\"line\">        static void Main(string[] args)</div><div class=\"line\">        &#123;            </div><div class=\"line\">            wuFengTingHai.Person.Person person = new wuFengTingHai.Person.Person(<span class=\"string\">\"无风听海\"</span>, <span class=\"string\">\"男\"</span>, <span class=\"string\">\"20\"</span>);</div><div class=\"line\">            //Console.WriteLine(wuFengTingHai.Person.Extend.PersonExtend.GetDescription(person, <span class=\"string\">\"直接通过静态类PersonExtend调用,\"</span>));</div><div class=\"line\">            //Console.WriteLine(person.GetDescription(<span class=\"string\">\"直接通过Person的实例调用,\"</span>));</div><div class=\"line\">            Console.WriteLine(person.ToString());</div><div class=\"line\">           </div><div class=\"line\"></div><div class=\"line\">            Console.ReadLine();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><p>调用结果</p>\n<p>以上我们可以看到编译时，扩展方法的优先级总是比类型本身中定义的实例方法低，所以与接口或类方法具有相同名称和签名的扩展方法永远不会被调用。</p>\n<p>综上进行总结<br>  扩展方法不改变被扩展类的代码，不用重新编译、修改、派生被扩展类<br>  扩展方法不能访问被扩展类的私有成员<br>  扩展方法会被被扩展类的同名方法覆盖，所以实现扩展方法我们需要承担随时被覆盖的风险<br>  扩展方法看似实现了面向对象中扩展对修改说不的特性，但是也违背了面向对象的继承原则，被扩展类的派生类是不能继承扩展扩展方法的，从而又违背了面向对象的多态性。<br>  在我们稳定的引用同一个版本的类库，但是我们没有该类库的源代码，那么我们可以使用扩展方法；但是从项目的可扩展、可维护和版本控制方面来说，都不建议</p>\n<p>  使用扩展方法进行类的扩展。</p>"},{"title":"Hello World","date":"2016-08-10T12:26:04.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-08-10 20:26:04\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2016-10-14T07:46:44.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu9hd79c0008xs8xj6u54tn6","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"浏览器兼容","date":"2016-10-14T12:58:34.000Z","_content":"# Firefox Event与 IE window Event兼容\n\n------\n在系统开发中，需要用户操作鼠标右键打开菜单时，IE直接通过使用window.event来获得对象的事件而火狐浏览器则使用触发方法中的event来获得，为了同时兼容，最后需要标准化事件对象。即：var evt=evt || event \n``` \n <script>\n    $(function(){\n         $(element).bind(\"contextmenu\", function (evt) {\n            //设置弹出框对象高度宽度\n            //获取的这个ID为obj的DIV对象就是个实例引起鼠标事件的元素\n            //evt代表事件对象（W3C DOM标准下）\n            var evt=evt || event; //标准化事件对象（W3C DOM 和IE DOM ）\n            evt.Target=evt.Target || evt.srcElement;//标准化事件对象属性<引起事件的元素>\n            //（W3C DOM 和IE DOM ）\n            evt.layerX=evt.layerX || evt.offsetX;//鼠标相对于引起事件的元素的父元素的X坐标(标准化IE)\n            evt.layerY=evt.layerY || evt.offsetY;//鼠标相对于引起事件的元素的父元素的Y坐标(标准化IE)\n            alert(\"相对这个DIV的X方向的坐标\"+evt.layerX+\"\\n相对这个DIV的Y方向的坐标\"+evt.layerY)\n        }\n    });\n </script>\n```\n\n","source":"_posts/浏览器兼容.md","raw":"---\ntitle: 浏览器兼容\ndate: 2016-10-14 20:58:34\ncategories: \n- 前端基础\ntags:\n- 浏览器兼容\n---\n# Firefox Event与 IE window Event兼容\n\n------\n在系统开发中，需要用户操作鼠标右键打开菜单时，IE直接通过使用window.event来获得对象的事件而火狐浏览器则使用触发方法中的event来获得，为了同时兼容，最后需要标准化事件对象。即：var evt=evt || event \n``` \n <script>\n    $(function(){\n         $(element).bind(\"contextmenu\", function (evt) {\n            //设置弹出框对象高度宽度\n            //获取的这个ID为obj的DIV对象就是个实例引起鼠标事件的元素\n            //evt代表事件对象（W3C DOM标准下）\n            var evt=evt || event; //标准化事件对象（W3C DOM 和IE DOM ）\n            evt.Target=evt.Target || evt.srcElement;//标准化事件对象属性<引起事件的元素>\n            //（W3C DOM 和IE DOM ）\n            evt.layerX=evt.layerX || evt.offsetX;//鼠标相对于引起事件的元素的父元素的X坐标(标准化IE)\n            evt.layerY=evt.layerY || evt.offsetY;//鼠标相对于引起事件的元素的父元素的Y坐标(标准化IE)\n            alert(\"相对这个DIV的X方向的坐标\"+evt.layerX+\"\\n相对这个DIV的Y方向的坐标\"+evt.layerY)\n        }\n    });\n </script>\n```\n\n","slug":"浏览器兼容","published":1,"updated":"2016-10-14T07:46:44.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu9hd79j0009xs8xnxn244l0","content":"<h1 id=\"Firefox-Event与-IE-window-Event兼容\"><a href=\"#Firefox-Event与-IE-window-Event兼容\" class=\"headerlink\" title=\"Firefox Event与 IE window Event兼容\"></a>Firefox Event与 IE window Event兼容</h1><hr>\n<p>在系统开发中，需要用户操作鼠标右键打开菜单时，IE直接通过使用window.event来获得对象的事件而火狐浏览器则使用触发方法中的event来获得，为了同时兼容，最后需要标准化事件对象。即：var evt=evt || event<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">   $(function()&#123;</div><div class=\"line\">        $(element).bind(&quot;contextmenu&quot;, function (evt) &#123;</div><div class=\"line\">           //设置弹出框对象高度宽度</div><div class=\"line\">           //获取的这个ID为obj的DIV对象就是个实例引起鼠标事件的元素</div><div class=\"line\">           //evt代表事件对象（W3C DOM标准下）</div><div class=\"line\">           var evt=evt || event; //标准化事件对象（W3C DOM 和IE DOM ）</div><div class=\"line\">           evt.Target=evt.Target || evt.srcElement;//标准化事件对象属性&lt;引起事件的元素&gt;</div><div class=\"line\">           //（W3C DOM 和IE DOM ）</div><div class=\"line\">           evt.layerX=evt.layerX || evt.offsetX;//鼠标相对于引起事件的元素的父元素的X坐标(标准化IE)</div><div class=\"line\">           evt.layerY=evt.layerY || evt.offsetY;//鼠标相对于引起事件的元素的父元素的Y坐标(标准化IE)</div><div class=\"line\">           alert(&quot;相对这个DIV的X方向的坐标&quot;+evt.layerX+&quot;\\n相对这个DIV的Y方向的坐标&quot;+evt.layerY)</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"Firefox-Event与-IE-window-Event兼容\"><a href=\"#Firefox-Event与-IE-window-Event兼容\" class=\"headerlink\" title=\"Firefox Event与 IE window Event兼容\"></a>Firefox Event与 IE window Event兼容</h1><hr>\n<p>在系统开发中，需要用户操作鼠标右键打开菜单时，IE直接通过使用window.event来获得对象的事件而火狐浏览器则使用触发方法中的event来获得，为了同时兼容，最后需要标准化事件对象。即：var evt=evt || event<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">   $(function()&#123;</div><div class=\"line\">        $(element).bind(&quot;contextmenu&quot;, function (evt) &#123;</div><div class=\"line\">           //设置弹出框对象高度宽度</div><div class=\"line\">           //获取的这个ID为obj的DIV对象就是个实例引起鼠标事件的元素</div><div class=\"line\">           //evt代表事件对象（W3C DOM标准下）</div><div class=\"line\">           var evt=evt || event; //标准化事件对象（W3C DOM 和IE DOM ）</div><div class=\"line\">           evt.Target=evt.Target || evt.srcElement;//标准化事件对象属性&lt;引起事件的元素&gt;</div><div class=\"line\">           //（W3C DOM 和IE DOM ）</div><div class=\"line\">           evt.layerX=evt.layerX || evt.offsetX;//鼠标相对于引起事件的元素的父元素的X坐标(标准化IE)</div><div class=\"line\">           evt.layerY=evt.layerY || evt.offsetY;//鼠标相对于引起事件的元素的父元素的Y坐标(标准化IE)</div><div class=\"line\">           alert(&quot;相对这个DIV的X方向的坐标&quot;+evt.layerX+&quot;\\n相对这个DIV的Y方向的坐标&quot;+evt.layerY)</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;);</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n"},{"title":"百度地图常用功能的使用","date":"2016-09-10T12:56:05.000Z","+description":"项目中用到了百度地图，整理一下常用的方便查阅","_content":"百度地图API使用\n<!--more-->\n# 资料\n1.[JavaScript API](http://lbsyun.baidu.com/index.php?title=jspopular)\n2.[demo](http://developer.baidu.com/map/jsdemo.htm)\n3.[工具开源库](http://developer.baidu.com/map/jsdemo.htm)（如鼠标点击后计算范围、聚合效果等）\n\n# 常用的功能及实现\n## 引入资源包\n引入常用的资源包（引入http://api.map.baidu.com/api?v=2.0&ak=tzAcIFZ5xCoRwm63NcBGfoVB 时ak是自己申请的一个秘钥）\n``` bash\n <script src=\"http://libs.baidu.com/jquery/2.0.0/jquery.min.js\"></script>\n    <!--jquery-->\n    <!--百度地图-->\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&ak=tzAcIFZ5xCoRwm63NcBGfoVB\"></script>\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/library/DrawingManager/1.4/src/DrawingManager_min.js\"></script>\n    <link rel=\"stylesheet\" href=\"http://api.map.baidu.com/library/DrawingManager/1.4/src/DrawingManager_min.css\" />\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/library/SearchInfoWindow/1.5/src/SearchInfoWindow_min.js\"></script>\n    <link rel=\"stylesheet\" href=\"http://api.map.baidu.com/library/SearchInfoWindow/1.5/src/SearchInfoWindow_min.css\" />\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/library/AreaRestriction/1.2/src/AreaRestriction_min.js\"></script>\n    <!--聚合-->\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/library/TextIconOverlay/1.2/src/TextIconOverlay_min.js\"></script>\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/library/MarkerClusterer/1.2/src/MarkerClusterer.js\"></script>\n    <!--聚合-->\n    <!--百度地图-->\n```\n## 初始化地图\n``` bash\n$(function(){ /*所有js代码放入*/});\n```\n\n## 设置中心点\n创建地图对象设置中心点以及缩放的级别zoom\n``` bash\n\t// 百度地图API功能\n            var map = new BMap.Map(\"allmap\");    // 创建Map实例\n            /*centerAndZoom(center:Point, zoom:Number)  none 设初始化地图。 \n             <span style=\"color:#ff0000;\"> 如果center类型为Point时，zoom必须赋值，范围3-19级，</span>若调用高清底图（针对移动端开发）时，\n              zoom可赋值范围为3-18级。如果<span style=\"color:#ff0000;\">center类型为字符串时，比如“北京”，zoom可以忽略</span>，地图将自动根据center适配最佳zoom级别。 \n            */\n            //map.centerAndZoom(new BMap.Point(113.195425, 39.657158), 10);  //初始化地图,设置中心点坐标和地图级别\n            map.centerAndZoom(\"北京市\");\n        });\n```\n## 插入缩放定位等控件\n``` bash\n    var navigationControl = new BMap.NavigationControl({\n\t// 靠左上角位置\n\tanchor: BMAP_ANCHOR_TOP_LEFT,\n\t// LARGE类型\n\ttype: BMAP_NAVIGATION_CONTROL_LARGE,\n\t// 启用显示定位\n\tenableGeolocation: true,\n\tshowZoomInfo: true,\n    });\n    map.addControl(navigationControl);\n\n```\n ![](http://i2.buimg.com/4851/bf4465457e5af658.jpg)\n## 开启滚轮缩放及禁用双击放大\n``` bash\n   map.enableScrollWheelZoom();     //开启鼠标滚轮缩放\n   map.disableDoubleClickZoom(true);//禁用双击放大。 \n```\n## 限制地图显示区域\n超出显示区域自动修改回限制区域，参数需要两个点的坐标，即限制区域地图的左上角和右下角坐标\n``` bash\n  //限制区域\n    var b = new BMap.Bounds(new BMap.Point(111.822527, 40.296748), new BMap.Point(114.566024,39.043834));\n    try {\n            BMapLib.AreaRestriction.setBounds(map, b);\n        } catch (e) {\n            alert(e);\n        }\t\n```\n## 添加行政区域（县、区级别）\n``` bash\n\t\tfunction getBoundary() {\n                var bdary = new BMap.Boundary();\n                bdary.get(\"西安市雁塔区\", function (rs) {       //获取行政区域\n                    map.clearOverlays();        //清除地图覆盖物       \n                    var count = rs.boundaries.length; //行政区域的点有多少个\n                    if (count === 0) {\n                        alert('未能获取当前输入行政区域');\n                        return;\n                    }\n                    var pointArray = [];\n                    for (var i = 0; i < count; i++) {\n                        var ply = new BMap.Polygon(rs.boundaries[i], { strokeWeight: 2, strokeColor: \"#ff0000\" }); //建立多边形覆盖物\n                        map.addOverlay(ply);  //添加覆盖物\n                        pointArray = pointArray.concat(ply.getPath());\n                    }\n                    map.setViewport(pointArray);    //调整视野                 \n                });\n            }\n```\n![](http://i2.buimg.com/4851/4ef2bb7e1d222d65.jpg)\n## 结合后台获得制定区域并画出\n``` bash\nShowArea();\n            //读取已有区域\n            function ShowArea() {\n\n                $.post(\"Handler.ashx?action=getAreaData\", \"\", function (data, status) {\n                    //var data = eval(dataJSON);\n                    var points = GetPointsArray(data);\n                    var polygon1 = new BMap.Polygon(points, { strokeColor: \"blue\", fillColor: \"#f0979f\", strokeWeight: 2, strokeOpacity: 0.5, fillOpacity: 0.3 });  //创建多边形\n                    map.addOverlay(polygon1);   //增加多边形\n                });\n            }\n            function GetPointsArray(points) {\n                var pointsArray = points.split(\";\");\n                var result = new Array();\n                for (var i = 0; i < pointsArray.length; i++) {\n                    result[i] = new BMap.Point(pointsArray[i].split(\",\")[0], pointsArray[i].split(\",\")[1]);\n                }\n\n                return result;\n            }\n```\n## 后台获得区域（点的集合）\n使用ajax与一般处理程序\n``` bash\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace WebApplication3\n{\n    /// <summary>\n    /// Handler 的摘要说明\n    /// </summary>\n    public class Handler : IHttpHandler\n    {\n\n        public void ProcessRequest(HttpContext context)\n        {\n            string action=context.Request[\"action\"];\n            switch(action)\n            {\n                case \"getAreaData\":\n                    GetAreaData(context);\n                    break;\n\n            }\n        }\n\n        public void GetAreaData(HttpContext context)\n        {\n            string s = \"108.860872, 34.258506;108.831975, 34.258587;108.827325, 34.254061;108.82198, 34.253861;108.821721, 34.242147;108.82502, 34.242241;108.825366, 34.235732;108.828081, 34.235904;108.828549, 34.225515;108.841104, 34.22704;108.836877, 34.210519;108.839338, 34.205291;108.852262, 34.206639;108.852829, 34.18584;108.875588, 34.185636;108.875624, 34.177398;108.980798, 34.177959;109.00823, 34.180186;109.022781, 34.185512;109.039102, 34.182088;109.060345, 34.191182;109.053019, 34.212803;109.056843, 34.243072;109.054189, 34.257263;109.033871, 34.257004;109.036981, 34.256214;109.037215, 34.240337;109.027373, 34.240809;109.027372, 34.243714;109.022632, 34.243735;109.02261, 34.248791;109.002924, 34.248887;108.971729, 34.236415;108.938526, 34.235527;108.897292, 34.253332;108.89572, 34.257881;108.860872, 34.258506\";\n            context.Response.Write(s);\n        }\n\n\n        public bool IsReusable\n        {\n            get\n            {\n                return false;\n            }\n        }\n    }\n}\n```\n## 点聚合及批量弹出窗口\n``` bash\n // 百度地图API功能\n            var map = new BMap.Map(\"allmap\");\n            map.centerAndZoom(new BMap.Point(116.404, 39.915), 4);\n            map.enableScrollWheelZoom();\n\n            var MAX = 10;\n            var markers = [];\n            var pt = null;\n            var i = 0;\n            for (; i < MAX; i++) {\n                pt = new BMap.Point(Math.random() * 40 + 85, Math.random() * 30 + 21);\n                var marker = new BMap.Marker(pt);\n                markers.push(marker);\n                var content1 = '<div style=\"margin:0;line-height:20px;padding:2px;\">内容</div>';\n                markers.push(marker);\n               <span style=\"color:#ff0000;\"> //使用闭包 这样内容才能显示的不同，否则全部都会只显示最后一个content1的内容</span>\n                (function (content1) {\n                    marker.addEventListener(\"click\", function (e) {\n\n                        //创建检索信息窗口对象\n                        var searchInfoWindow = null;\n                        searchInfoWindow = new BMapLib.SearchInfoWindow(map, content1, {\n                            title: '信息<a target=\"_top\" onclick=\"alert(1)\" style=\"margin-left:5px;font-size:12px;line-height:30px;color:#3d6dcc;font-weight:normal;text-decoration:none;cursor:pointer;\">详情»</a>',      //标题\n                            width: 250,             //宽度\n                            height: 200,              //高度\n                            panel: \"panel\",         //检索结果面板\n                            enableAutoPan: true,     //自动平移\n                            enableSendToPhone: false,//百度发送短信图标\n                            searchTypes: [\n                                //BMAPLIB_TAB_SEARCH,   //周边检索\n                                //BMAPLIB_TAB_TO_HERE,  //到这里去\n                                //BMAPLIB_TAB_FROM_HERE //从这里出发\n                            ]\n                        });\n\n                        searchInfoWindow.open(e.target);\n\n                    });\n                })(content1)\n            }\n       \n            //最简单的用法，生成一个marker数组，然后调用markerClusterer类即可。\n            var markerClusterer = new BMapLib.MarkerClusterer(map, { markers: markers });\n```\n![](http://i2.buimg.com/4851/f6830ddc390b1e99.jpg)\n![](http://i2.buimg.com/4851/fad49890bc5afa59.jpg)\n","source":"_posts/百度地图常用功能的使用.md","raw":"---\ntitle: 百度地图常用功能的使用\ndate: 2016-09-10 20:56:05\ntags:\n- 百度地图\n- 地图操作\ncategories:\n- 插件\n+description: \"项目中用到了百度地图，整理一下常用的方便查阅\"\n---\n百度地图API使用\n<!--more-->\n# 资料\n1.[JavaScript API](http://lbsyun.baidu.com/index.php?title=jspopular)\n2.[demo](http://developer.baidu.com/map/jsdemo.htm)\n3.[工具开源库](http://developer.baidu.com/map/jsdemo.htm)（如鼠标点击后计算范围、聚合效果等）\n\n# 常用的功能及实现\n## 引入资源包\n引入常用的资源包（引入http://api.map.baidu.com/api?v=2.0&ak=tzAcIFZ5xCoRwm63NcBGfoVB 时ak是自己申请的一个秘钥）\n``` bash\n <script src=\"http://libs.baidu.com/jquery/2.0.0/jquery.min.js\"></script>\n    <!--jquery-->\n    <!--百度地图-->\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&ak=tzAcIFZ5xCoRwm63NcBGfoVB\"></script>\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/library/DrawingManager/1.4/src/DrawingManager_min.js\"></script>\n    <link rel=\"stylesheet\" href=\"http://api.map.baidu.com/library/DrawingManager/1.4/src/DrawingManager_min.css\" />\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/library/SearchInfoWindow/1.5/src/SearchInfoWindow_min.js\"></script>\n    <link rel=\"stylesheet\" href=\"http://api.map.baidu.com/library/SearchInfoWindow/1.5/src/SearchInfoWindow_min.css\" />\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/library/AreaRestriction/1.2/src/AreaRestriction_min.js\"></script>\n    <!--聚合-->\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/library/TextIconOverlay/1.2/src/TextIconOverlay_min.js\"></script>\n    <script type=\"text/javascript\" src=\"http://api.map.baidu.com/library/MarkerClusterer/1.2/src/MarkerClusterer.js\"></script>\n    <!--聚合-->\n    <!--百度地图-->\n```\n## 初始化地图\n``` bash\n$(function(){ /*所有js代码放入*/});\n```\n\n## 设置中心点\n创建地图对象设置中心点以及缩放的级别zoom\n``` bash\n\t// 百度地图API功能\n            var map = new BMap.Map(\"allmap\");    // 创建Map实例\n            /*centerAndZoom(center:Point, zoom:Number)  none 设初始化地图。 \n             <span style=\"color:#ff0000;\"> 如果center类型为Point时，zoom必须赋值，范围3-19级，</span>若调用高清底图（针对移动端开发）时，\n              zoom可赋值范围为3-18级。如果<span style=\"color:#ff0000;\">center类型为字符串时，比如“北京”，zoom可以忽略</span>，地图将自动根据center适配最佳zoom级别。 \n            */\n            //map.centerAndZoom(new BMap.Point(113.195425, 39.657158), 10);  //初始化地图,设置中心点坐标和地图级别\n            map.centerAndZoom(\"北京市\");\n        });\n```\n## 插入缩放定位等控件\n``` bash\n    var navigationControl = new BMap.NavigationControl({\n\t// 靠左上角位置\n\tanchor: BMAP_ANCHOR_TOP_LEFT,\n\t// LARGE类型\n\ttype: BMAP_NAVIGATION_CONTROL_LARGE,\n\t// 启用显示定位\n\tenableGeolocation: true,\n\tshowZoomInfo: true,\n    });\n    map.addControl(navigationControl);\n\n```\n ![](http://i2.buimg.com/4851/bf4465457e5af658.jpg)\n## 开启滚轮缩放及禁用双击放大\n``` bash\n   map.enableScrollWheelZoom();     //开启鼠标滚轮缩放\n   map.disableDoubleClickZoom(true);//禁用双击放大。 \n```\n## 限制地图显示区域\n超出显示区域自动修改回限制区域，参数需要两个点的坐标，即限制区域地图的左上角和右下角坐标\n``` bash\n  //限制区域\n    var b = new BMap.Bounds(new BMap.Point(111.822527, 40.296748), new BMap.Point(114.566024,39.043834));\n    try {\n            BMapLib.AreaRestriction.setBounds(map, b);\n        } catch (e) {\n            alert(e);\n        }\t\n```\n## 添加行政区域（县、区级别）\n``` bash\n\t\tfunction getBoundary() {\n                var bdary = new BMap.Boundary();\n                bdary.get(\"西安市雁塔区\", function (rs) {       //获取行政区域\n                    map.clearOverlays();        //清除地图覆盖物       \n                    var count = rs.boundaries.length; //行政区域的点有多少个\n                    if (count === 0) {\n                        alert('未能获取当前输入行政区域');\n                        return;\n                    }\n                    var pointArray = [];\n                    for (var i = 0; i < count; i++) {\n                        var ply = new BMap.Polygon(rs.boundaries[i], { strokeWeight: 2, strokeColor: \"#ff0000\" }); //建立多边形覆盖物\n                        map.addOverlay(ply);  //添加覆盖物\n                        pointArray = pointArray.concat(ply.getPath());\n                    }\n                    map.setViewport(pointArray);    //调整视野                 \n                });\n            }\n```\n![](http://i2.buimg.com/4851/4ef2bb7e1d222d65.jpg)\n## 结合后台获得制定区域并画出\n``` bash\nShowArea();\n            //读取已有区域\n            function ShowArea() {\n\n                $.post(\"Handler.ashx?action=getAreaData\", \"\", function (data, status) {\n                    //var data = eval(dataJSON);\n                    var points = GetPointsArray(data);\n                    var polygon1 = new BMap.Polygon(points, { strokeColor: \"blue\", fillColor: \"#f0979f\", strokeWeight: 2, strokeOpacity: 0.5, fillOpacity: 0.3 });  //创建多边形\n                    map.addOverlay(polygon1);   //增加多边形\n                });\n            }\n            function GetPointsArray(points) {\n                var pointsArray = points.split(\";\");\n                var result = new Array();\n                for (var i = 0; i < pointsArray.length; i++) {\n                    result[i] = new BMap.Point(pointsArray[i].split(\",\")[0], pointsArray[i].split(\",\")[1]);\n                }\n\n                return result;\n            }\n```\n## 后台获得区域（点的集合）\n使用ajax与一般处理程序\n``` bash\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace WebApplication3\n{\n    /// <summary>\n    /// Handler 的摘要说明\n    /// </summary>\n    public class Handler : IHttpHandler\n    {\n\n        public void ProcessRequest(HttpContext context)\n        {\n            string action=context.Request[\"action\"];\n            switch(action)\n            {\n                case \"getAreaData\":\n                    GetAreaData(context);\n                    break;\n\n            }\n        }\n\n        public void GetAreaData(HttpContext context)\n        {\n            string s = \"108.860872, 34.258506;108.831975, 34.258587;108.827325, 34.254061;108.82198, 34.253861;108.821721, 34.242147;108.82502, 34.242241;108.825366, 34.235732;108.828081, 34.235904;108.828549, 34.225515;108.841104, 34.22704;108.836877, 34.210519;108.839338, 34.205291;108.852262, 34.206639;108.852829, 34.18584;108.875588, 34.185636;108.875624, 34.177398;108.980798, 34.177959;109.00823, 34.180186;109.022781, 34.185512;109.039102, 34.182088;109.060345, 34.191182;109.053019, 34.212803;109.056843, 34.243072;109.054189, 34.257263;109.033871, 34.257004;109.036981, 34.256214;109.037215, 34.240337;109.027373, 34.240809;109.027372, 34.243714;109.022632, 34.243735;109.02261, 34.248791;109.002924, 34.248887;108.971729, 34.236415;108.938526, 34.235527;108.897292, 34.253332;108.89572, 34.257881;108.860872, 34.258506\";\n            context.Response.Write(s);\n        }\n\n\n        public bool IsReusable\n        {\n            get\n            {\n                return false;\n            }\n        }\n    }\n}\n```\n## 点聚合及批量弹出窗口\n``` bash\n // 百度地图API功能\n            var map = new BMap.Map(\"allmap\");\n            map.centerAndZoom(new BMap.Point(116.404, 39.915), 4);\n            map.enableScrollWheelZoom();\n\n            var MAX = 10;\n            var markers = [];\n            var pt = null;\n            var i = 0;\n            for (; i < MAX; i++) {\n                pt = new BMap.Point(Math.random() * 40 + 85, Math.random() * 30 + 21);\n                var marker = new BMap.Marker(pt);\n                markers.push(marker);\n                var content1 = '<div style=\"margin:0;line-height:20px;padding:2px;\">内容</div>';\n                markers.push(marker);\n               <span style=\"color:#ff0000;\"> //使用闭包 这样内容才能显示的不同，否则全部都会只显示最后一个content1的内容</span>\n                (function (content1) {\n                    marker.addEventListener(\"click\", function (e) {\n\n                        //创建检索信息窗口对象\n                        var searchInfoWindow = null;\n                        searchInfoWindow = new BMapLib.SearchInfoWindow(map, content1, {\n                            title: '信息<a target=\"_top\" onclick=\"alert(1)\" style=\"margin-left:5px;font-size:12px;line-height:30px;color:#3d6dcc;font-weight:normal;text-decoration:none;cursor:pointer;\">详情»</a>',      //标题\n                            width: 250,             //宽度\n                            height: 200,              //高度\n                            panel: \"panel\",         //检索结果面板\n                            enableAutoPan: true,     //自动平移\n                            enableSendToPhone: false,//百度发送短信图标\n                            searchTypes: [\n                                //BMAPLIB_TAB_SEARCH,   //周边检索\n                                //BMAPLIB_TAB_TO_HERE,  //到这里去\n                                //BMAPLIB_TAB_FROM_HERE //从这里出发\n                            ]\n                        });\n\n                        searchInfoWindow.open(e.target);\n\n                    });\n                })(content1)\n            }\n       \n            //最简单的用法，生成一个marker数组，然后调用markerClusterer类即可。\n            var markerClusterer = new BMapLib.MarkerClusterer(map, { markers: markers });\n```\n![](http://i2.buimg.com/4851/f6830ddc390b1e99.jpg)\n![](http://i2.buimg.com/4851/fad49890bc5afa59.jpg)\n","slug":"百度地图常用功能的使用","published":1,"updated":"2016-10-14T07:46:44.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciu9hd79m000cxs8xsysn5su9","content":"<p>百度地图API使用<br><a id=\"more\"></a></p>\n<h1 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h1><p>1.<a href=\"http://lbsyun.baidu.com/index.php?title=jspopular\" target=\"_blank\" rel=\"external\">JavaScript API</a><br>2.<a href=\"http://developer.baidu.com/map/jsdemo.htm\" target=\"_blank\" rel=\"external\">demo</a><br>3.<a href=\"http://developer.baidu.com/map/jsdemo.htm\" target=\"_blank\" rel=\"external\">工具开源库</a>（如鼠标点击后计算范围、聚合效果等）</p>\n<h1 id=\"常用的功能及实现\"><a href=\"#常用的功能及实现\" class=\"headerlink\" title=\"常用的功能及实现\"></a>常用的功能及实现</h1><h2 id=\"引入资源包\"><a href=\"#引入资源包\" class=\"headerlink\" title=\"引入资源包\"></a>引入资源包</h2><p>引入常用的资源包（引入<a href=\"http://api.map.baidu.com/api?v=2.0&amp;ak=tzAcIFZ5xCoRwm63NcBGfoVB\" target=\"_blank\" rel=\"external\">http://api.map.baidu.com/api?v=2.0&amp;ak=tzAcIFZ5xCoRwm63NcBGfoVB</a> 时ak是自己申请的一个秘钥）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"http://libs.baidu.com/jquery/2.0.0/jquery.min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;!--jquery--&gt;</div><div class=\"line\">   &lt;!--百度地图--&gt;</div><div class=\"line\">   &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://api.map.baidu.com/api?v=2.0&amp;ak=tzAcIFZ5xCoRwm63NcBGfoVB\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://api.map.baidu.com/library/DrawingManager/1.4/src/DrawingManager_min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"http://api.map.baidu.com/library/DrawingManager/1.4/src/DrawingManager_min.css\"</span> /&gt;</div><div class=\"line\">   &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://api.map.baidu.com/library/SearchInfoWindow/1.5/src/SearchInfoWindow_min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"http://api.map.baidu.com/library/SearchInfoWindow/1.5/src/SearchInfoWindow_min.css\"</span> /&gt;</div><div class=\"line\">   &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://api.map.baidu.com/library/AreaRestriction/1.2/src/AreaRestriction_min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;!--聚合--&gt;</div><div class=\"line\">   &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://api.map.baidu.com/library/TextIconOverlay/1.2/src/TextIconOverlay_min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://api.map.baidu.com/library/MarkerClusterer/1.2/src/MarkerClusterer.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;!--聚合--&gt;</div><div class=\"line\">   &lt;!--百度地图--&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"初始化地图\"><a href=\"#初始化地图\" class=\"headerlink\" title=\"初始化地图\"></a>初始化地图</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"title\">function</span></span>()&#123; /*所有js代码放入*/&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"设置中心点\"><a href=\"#设置中心点\" class=\"headerlink\" title=\"设置中心点\"></a>设置中心点</h2><p>创建地图对象设置中心点以及缩放的级别zoom<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 百度地图API功能</div><div class=\"line\">           var map = new BMap.Map(<span class=\"string\">\"allmap\"</span>);    // 创建Map实例</div><div class=\"line\">           /*centerAndZoom(center:Point, zoom:Number)  none 设初始化地图。 </div><div class=\"line\">            &lt;span style=<span class=\"string\">\"color:#ff0000;\"</span>&gt; 如果center类型为Point时，zoom必须赋值，范围3-19级，&lt;/span&gt;若调用高清底图（针对移动端开发）时，</div><div class=\"line\">             zoom可赋值范围为3-18级。如果&lt;span style=<span class=\"string\">\"color:#ff0000;\"</span>&gt;center类型为字符串时，比如“北京”，zoom可以忽略&lt;/span&gt;，地图将自动根据center适配最佳zoom级别。 </div><div class=\"line\">           */</div><div class=\"line\">           //map.centerAndZoom(new BMap.Point(113.195425, 39.657158), 10);  //初始化地图,设置中心点坐标和地图级别</div><div class=\"line\">           map.centerAndZoom(<span class=\"string\">\"北京市\"</span>);</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"插入缩放定位等控件\"><a href=\"#插入缩放定位等控件\" class=\"headerlink\" title=\"插入缩放定位等控件\"></a>插入缩放定位等控件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">   var navigationControl = new BMap.NavigationControl(&#123;</div><div class=\"line\">// 靠左上角位置</div><div class=\"line\">anchor: BMAP_ANCHOR_TOP_LEFT,</div><div class=\"line\">// LARGE类型</div><div class=\"line\"><span class=\"built_in\">type</span>: BMAP_NAVIGATION_CONTROL_LARGE,</div><div class=\"line\">// 启用显示定位</div><div class=\"line\"><span class=\"built_in\">enable</span>Geolocation: <span class=\"literal\">true</span>,</div><div class=\"line\">showZoomInfo: <span class=\"literal\">true</span>,</div><div class=\"line\">   &#125;);</div><div class=\"line\">   map.addControl(navigationControl);</div></pre></td></tr></table></figure>\n<p> <img src=\"http://i2.buimg.com/4851/bf4465457e5af658.jpg\" alt=\"\"></p>\n<h2 id=\"开启滚轮缩放及禁用双击放大\"><a href=\"#开启滚轮缩放及禁用双击放大\" class=\"headerlink\" title=\"开启滚轮缩放及禁用双击放大\"></a>开启滚轮缩放及禁用双击放大</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.enableScrollWheelZoom();     //开启鼠标滚轮缩放</div><div class=\"line\">map.disableDoubleClickZoom(<span class=\"literal\">true</span>);//禁用双击放大。</div></pre></td></tr></table></figure>\n<h2 id=\"限制地图显示区域\"><a href=\"#限制地图显示区域\" class=\"headerlink\" title=\"限制地图显示区域\"></a>限制地图显示区域</h2><p>超出显示区域自动修改回限制区域，参数需要两个点的坐标，即限制区域地图的左上角和右下角坐标<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//限制区域</div><div class=\"line\">  var b = new BMap.Bounds(new BMap.Point(111.822527, 40.296748), new BMap.Point(114.566024,39.043834));</div><div class=\"line\">  try &#123;</div><div class=\"line\">          BMapLib.AreaRestriction.setBounds(map, b);</div><div class=\"line\">      &#125; catch (e) &#123;</div><div class=\"line\">          alert(e);</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"添加行政区域（县、区级别）\"><a href=\"#添加行政区域（县、区级别）\" class=\"headerlink\" title=\"添加行政区域（县、区级别）\"></a>添加行政区域（县、区级别）</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">getBoundary</span></span>() &#123;</div><div class=\"line\">              var bdary = new BMap.Boundary();</div><div class=\"line\">              bdary.get(<span class=\"string\">\"西安市雁塔区\"</span>, <span class=\"keyword\">function</span> (rs) &#123;       //获取行政区域</div><div class=\"line\">                  map.clearOverlays();        //清除地图覆盖物       </div><div class=\"line\">                  var count = rs.boundaries.length; //行政区域的点有多少个</div><div class=\"line\">                  <span class=\"keyword\">if</span> (count === 0) &#123;</div><div class=\"line\">                      alert(<span class=\"string\">'未能获取当前输入行政区域'</span>);</div><div class=\"line\">                      <span class=\"built_in\">return</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  var pointArray = [];</div><div class=\"line\">                  <span class=\"keyword\">for</span> (var i = 0; i &lt; count; i++) &#123;</div><div class=\"line\">                      var ply = new BMap.Polygon(rs.boundaries[i], &#123; strokeWeight: 2, strokeColor: <span class=\"string\">\"#ff0000\"</span> &#125;); //建立多边形覆盖物</div><div class=\"line\">                      map.addOverlay(ply);  //添加覆盖物</div><div class=\"line\">                      pointArray = pointArray.concat(ply.getPath());</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  map.setViewport(pointArray);    //调整视野                 </div><div class=\"line\">              &#125;);</div><div class=\"line\">          &#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://i2.buimg.com/4851/4ef2bb7e1d222d65.jpg\" alt=\"\"></p>\n<h2 id=\"结合后台获得制定区域并画出\"><a href=\"#结合后台获得制定区域并画出\" class=\"headerlink\" title=\"结合后台获得制定区域并画出\"></a>结合后台获得制定区域并画出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">ShowArea();</div><div class=\"line\">            //读取已有区域</div><div class=\"line\">            <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">ShowArea</span></span>() &#123;</div><div class=\"line\"></div><div class=\"line\">                $.post(<span class=\"string\">\"Handler.ashx?action=getAreaData\"</span>, <span class=\"string\">\"\"</span>, <span class=\"keyword\">function</span> (data, status) &#123;</div><div class=\"line\">                    //var data = <span class=\"built_in\">eval</span>(dataJSON);</div><div class=\"line\">                    var points = GetPointsArray(data);</div><div class=\"line\">                    var polygon1 = new BMap.Polygon(points, &#123; strokeColor: <span class=\"string\">\"blue\"</span>, fillColor: <span class=\"string\">\"#f0979f\"</span>, strokeWeight: 2, strokeOpacity: 0.5, fillOpacity: 0.3 &#125;);  //创建多边形</div><div class=\"line\">                    map.addOverlay(polygon1);   //增加多边形</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">function</span> GetPointsArray(points) &#123;</div><div class=\"line\">                var pointsArray = points.split(<span class=\"string\">\";\"</span>);</div><div class=\"line\">                var result = new Array();</div><div class=\"line\">                <span class=\"keyword\">for</span> (var i = 0; i &lt; pointsArray.length; i++) &#123;</div><div class=\"line\">                    result[i] = new BMap.Point(pointsArray[i].split(<span class=\"string\">\",\"</span>)[0], pointsArray[i].split(<span class=\"string\">\",\"</span>)[1]);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"built_in\">return</span> result;</div><div class=\"line\">            &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"后台获得区域（点的集合）\"><a href=\"#后台获得区域（点的集合）\" class=\"headerlink\" title=\"后台获得区域（点的集合）\"></a>后台获得区域（点的集合）</h2><p>使用ajax与一般处理程序<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Web;</div><div class=\"line\"></div><div class=\"line\">namespace WebApplication3</div><div class=\"line\">&#123;</div><div class=\"line\">    /// &lt;summary&gt;</div><div class=\"line\">    /// Handler 的摘要说明</div><div class=\"line\">    /// &lt;/summary&gt;</div><div class=\"line\">    public class Handler : IHttpHandler</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        public void ProcessRequest(HttpContext context)</div><div class=\"line\">        &#123;</div><div class=\"line\">            string action=context.Request[<span class=\"string\">\"action\"</span>];</div><div class=\"line\">            switch(action)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"getAreaData\"</span>:</div><div class=\"line\">                    GetAreaData(context);</div><div class=\"line\">                    <span class=\"built_in\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void GetAreaData(HttpContext context)</div><div class=\"line\">        &#123;</div><div class=\"line\">            string s = <span class=\"string\">\"108.860872, 34.258506;108.831975, 34.258587;108.827325, 34.254061;108.82198, 34.253861;108.821721, 34.242147;108.82502, 34.242241;108.825366, 34.235732;108.828081, 34.235904;108.828549, 34.225515;108.841104, 34.22704;108.836877, 34.210519;108.839338, 34.205291;108.852262, 34.206639;108.852829, 34.18584;108.875588, 34.185636;108.875624, 34.177398;108.980798, 34.177959;109.00823, 34.180186;109.022781, 34.185512;109.039102, 34.182088;109.060345, 34.191182;109.053019, 34.212803;109.056843, 34.243072;109.054189, 34.257263;109.033871, 34.257004;109.036981, 34.256214;109.037215, 34.240337;109.027373, 34.240809;109.027372, 34.243714;109.022632, 34.243735;109.02261, 34.248791;109.002924, 34.248887;108.971729, 34.236415;108.938526, 34.235527;108.897292, 34.253332;108.89572, 34.257881;108.860872, 34.258506\"</span>;</div><div class=\"line\">            context.Response.Write(s);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        public bool IsReusable</div><div class=\"line\">        &#123;</div><div class=\"line\">            get</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"点聚合及批量弹出窗口\"><a href=\"#点聚合及批量弹出窗口\" class=\"headerlink\" title=\"点聚合及批量弹出窗口\"></a>点聚合及批量弹出窗口</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 百度地图API功能</div><div class=\"line\">           var map = new BMap.Map(<span class=\"string\">\"allmap\"</span>);</div><div class=\"line\">           map.centerAndZoom(new BMap.Point(116.404, 39.915), 4);</div><div class=\"line\">           map.enableScrollWheelZoom();</div><div class=\"line\"></div><div class=\"line\">           var MAX = 10;</div><div class=\"line\">           var markers = [];</div><div class=\"line\">           var pt = null;</div><div class=\"line\">           var i = 0;</div><div class=\"line\">           <span class=\"keyword\">for</span> (; i &lt; MAX; i++) &#123;</div><div class=\"line\">               pt = new BMap.Point(Math.random() * 40 + 85, Math.random() * 30 + 21);</div><div class=\"line\">               var marker = new BMap.Marker(pt);</div><div class=\"line\">               markers.push(marker);</div><div class=\"line\">               var content1 = <span class=\"string\">'&lt;div style=\"margin:0;line-height:20px;padding:2px;\"&gt;内容&lt;/div&gt;'</span>;</div><div class=\"line\">               markers.push(marker);</div><div class=\"line\">              &lt;span style=<span class=\"string\">\"color:#ff0000;\"</span>&gt; //使用闭包 这样内容才能显示的不同，否则全部都会只显示最后一个content1的内容&lt;/span&gt;</div><div class=\"line\">               (<span class=\"keyword\">function</span> (content1) &#123;</div><div class=\"line\">                   marker.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"keyword\">function</span> (e) &#123;</div><div class=\"line\"></div><div class=\"line\">                       //创建检索信息窗口对象</div><div class=\"line\">                       var searchInfoWindow = null;</div><div class=\"line\">                       searchInfoWindow = new BMapLib.SearchInfoWindow(map, content1, &#123;</div><div class=\"line\">                           title: <span class=\"string\">'信息&lt;a target=\"_top\" onclick=\"alert(1)\" style=\"margin-left:5px;font-size:12px;line-height:30px;color:#3d6dcc;font-weight:normal;text-decoration:none;cursor:pointer;\"&gt;详情»&lt;/a&gt;'</span>,      //标题</div><div class=\"line\">                           width: 250,             //宽度</div><div class=\"line\">                           height: 200,              //高度</div><div class=\"line\">                           panel: <span class=\"string\">\"panel\"</span>,         //检索结果面板</div><div class=\"line\">                           <span class=\"built_in\">enable</span>AutoPan: <span class=\"literal\">true</span>,     //自动平移</div><div class=\"line\">                           <span class=\"built_in\">enable</span>SendToPhone: <span class=\"literal\">false</span>,//百度发送短信图标</div><div class=\"line\">                           searchTypes: [</div><div class=\"line\">                               //BMAPLIB_TAB_SEARCH,   //周边检索</div><div class=\"line\">                               //BMAPLIB_TAB_TO_HERE,  //到这里去</div><div class=\"line\">                               //BMAPLIB_TAB_FROM_HERE //从这里出发</div><div class=\"line\">                           ]</div><div class=\"line\">                       &#125;);</div><div class=\"line\"></div><div class=\"line\">                       searchInfoWindow.open(e.target);</div><div class=\"line\"></div><div class=\"line\">                   &#125;);</div><div class=\"line\">               &#125;)(content1)</div><div class=\"line\">           &#125;</div><div class=\"line\">      </div><div class=\"line\">           //最简单的用法，生成一个marker数组，然后调用markerClusterer类即可。</div><div class=\"line\">           var markerClusterer = new BMapLib.MarkerClusterer(map, &#123; markers: markers &#125;);</div></pre></td></tr></table></figure>\n<p><img src=\"http://i2.buimg.com/4851/f6830ddc390b1e99.jpg\" alt=\"\"><br><img src=\"http://i2.buimg.com/4851/fad49890bc5afa59.jpg\" alt=\"\"></p>\n","excerpt":"<p>百度地图API使用<br>","more":"</p>\n<h1 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h1><p>1.<a href=\"http://lbsyun.baidu.com/index.php?title=jspopular\">JavaScript API</a><br>2.<a href=\"http://developer.baidu.com/map/jsdemo.htm\">demo</a><br>3.<a href=\"http://developer.baidu.com/map/jsdemo.htm\">工具开源库</a>（如鼠标点击后计算范围、聚合效果等）</p>\n<h1 id=\"常用的功能及实现\"><a href=\"#常用的功能及实现\" class=\"headerlink\" title=\"常用的功能及实现\"></a>常用的功能及实现</h1><h2 id=\"引入资源包\"><a href=\"#引入资源包\" class=\"headerlink\" title=\"引入资源包\"></a>引入资源包</h2><p>引入常用的资源包（引入<a href=\"http://api.map.baidu.com/api?v=2.0&amp;ak=tzAcIFZ5xCoRwm63NcBGfoVB\">http://api.map.baidu.com/api?v=2.0&amp;ak=tzAcIFZ5xCoRwm63NcBGfoVB</a> 时ak是自己申请的一个秘钥）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"http://libs.baidu.com/jquery/2.0.0/jquery.min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;!--jquery--&gt;</div><div class=\"line\">   &lt;!--百度地图--&gt;</div><div class=\"line\">   &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://api.map.baidu.com/api?v=2.0&amp;ak=tzAcIFZ5xCoRwm63NcBGfoVB\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://api.map.baidu.com/library/DrawingManager/1.4/src/DrawingManager_min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"http://api.map.baidu.com/library/DrawingManager/1.4/src/DrawingManager_min.css\"</span> /&gt;</div><div class=\"line\">   &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://api.map.baidu.com/library/SearchInfoWindow/1.5/src/SearchInfoWindow_min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"http://api.map.baidu.com/library/SearchInfoWindow/1.5/src/SearchInfoWindow_min.css\"</span> /&gt;</div><div class=\"line\">   &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://api.map.baidu.com/library/AreaRestriction/1.2/src/AreaRestriction_min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;!--聚合--&gt;</div><div class=\"line\">   &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://api.map.baidu.com/library/TextIconOverlay/1.2/src/TextIconOverlay_min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://api.map.baidu.com/library/MarkerClusterer/1.2/src/MarkerClusterer.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">   &lt;!--聚合--&gt;</div><div class=\"line\">   &lt;!--百度地图--&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"初始化地图\"><a href=\"#初始化地图\" class=\"headerlink\" title=\"初始化地图\"></a>初始化地图</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"function\"><span class=\"title\">function</span></span>()&#123; /*所有js代码放入*/&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"设置中心点\"><a href=\"#设置中心点\" class=\"headerlink\" title=\"设置中心点\"></a>设置中心点</h2><p>创建地图对象设置中心点以及缩放的级别zoom<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 百度地图API功能</div><div class=\"line\">           var map = new BMap.Map(<span class=\"string\">\"allmap\"</span>);    // 创建Map实例</div><div class=\"line\">           /*centerAndZoom(center:Point, zoom:Number)  none 设初始化地图。 </div><div class=\"line\">            &lt;span style=<span class=\"string\">\"color:#ff0000;\"</span>&gt; 如果center类型为Point时，zoom必须赋值，范围3-19级，&lt;/span&gt;若调用高清底图（针对移动端开发）时，</div><div class=\"line\">             zoom可赋值范围为3-18级。如果&lt;span style=<span class=\"string\">\"color:#ff0000;\"</span>&gt;center类型为字符串时，比如“北京”，zoom可以忽略&lt;/span&gt;，地图将自动根据center适配最佳zoom级别。 </div><div class=\"line\">           */</div><div class=\"line\">           //map.centerAndZoom(new BMap.Point(113.195425, 39.657158), 10);  //初始化地图,设置中心点坐标和地图级别</div><div class=\"line\">           map.centerAndZoom(<span class=\"string\">\"北京市\"</span>);</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"插入缩放定位等控件\"><a href=\"#插入缩放定位等控件\" class=\"headerlink\" title=\"插入缩放定位等控件\"></a>插入缩放定位等控件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">   var navigationControl = new BMap.NavigationControl(&#123;</div><div class=\"line\">// 靠左上角位置</div><div class=\"line\">anchor: BMAP_ANCHOR_TOP_LEFT,</div><div class=\"line\">// LARGE类型</div><div class=\"line\"><span class=\"built_in\">type</span>: BMAP_NAVIGATION_CONTROL_LARGE,</div><div class=\"line\">// 启用显示定位</div><div class=\"line\"><span class=\"built_in\">enable</span>Geolocation: <span class=\"literal\">true</span>,</div><div class=\"line\">showZoomInfo: <span class=\"literal\">true</span>,</div><div class=\"line\">   &#125;);</div><div class=\"line\">   map.addControl(navigationControl);</div></pre></td></tr></table></figure>\n<p> <img src=\"http://i2.buimg.com/4851/bf4465457e5af658.jpg\" alt=\"\"></p>\n<h2 id=\"开启滚轮缩放及禁用双击放大\"><a href=\"#开启滚轮缩放及禁用双击放大\" class=\"headerlink\" title=\"开启滚轮缩放及禁用双击放大\"></a>开启滚轮缩放及禁用双击放大</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.enableScrollWheelZoom();     //开启鼠标滚轮缩放</div><div class=\"line\">map.disableDoubleClickZoom(<span class=\"literal\">true</span>);//禁用双击放大。</div></pre></td></tr></table></figure>\n<h2 id=\"限制地图显示区域\"><a href=\"#限制地图显示区域\" class=\"headerlink\" title=\"限制地图显示区域\"></a>限制地图显示区域</h2><p>超出显示区域自动修改回限制区域，参数需要两个点的坐标，即限制区域地图的左上角和右下角坐标<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//限制区域</div><div class=\"line\">  var b = new BMap.Bounds(new BMap.Point(111.822527, 40.296748), new BMap.Point(114.566024,39.043834));</div><div class=\"line\">  try &#123;</div><div class=\"line\">          BMapLib.AreaRestriction.setBounds(map, b);</div><div class=\"line\">      &#125; catch (e) &#123;</div><div class=\"line\">          alert(e);</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"添加行政区域（县、区级别）\"><a href=\"#添加行政区域（县、区级别）\" class=\"headerlink\" title=\"添加行政区域（县、区级别）\"></a>添加行政区域（县、区级别）</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">getBoundary</span></span>() &#123;</div><div class=\"line\">              var bdary = new BMap.Boundary();</div><div class=\"line\">              bdary.get(<span class=\"string\">\"西安市雁塔区\"</span>, <span class=\"keyword\">function</span> (rs) &#123;       //获取行政区域</div><div class=\"line\">                  map.clearOverlays();        //清除地图覆盖物       </div><div class=\"line\">                  var count = rs.boundaries.length; //行政区域的点有多少个</div><div class=\"line\">                  <span class=\"keyword\">if</span> (count === 0) &#123;</div><div class=\"line\">                      alert(<span class=\"string\">'未能获取当前输入行政区域'</span>);</div><div class=\"line\">                      <span class=\"built_in\">return</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  var pointArray = [];</div><div class=\"line\">                  <span class=\"keyword\">for</span> (var i = 0; i &lt; count; i++) &#123;</div><div class=\"line\">                      var ply = new BMap.Polygon(rs.boundaries[i], &#123; strokeWeight: 2, strokeColor: <span class=\"string\">\"#ff0000\"</span> &#125;); //建立多边形覆盖物</div><div class=\"line\">                      map.addOverlay(ply);  //添加覆盖物</div><div class=\"line\">                      pointArray = pointArray.concat(ply.getPath());</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  map.setViewport(pointArray);    //调整视野                 </div><div class=\"line\">              &#125;);</div><div class=\"line\">          &#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://i2.buimg.com/4851/4ef2bb7e1d222d65.jpg\" alt=\"\"></p>\n<h2 id=\"结合后台获得制定区域并画出\"><a href=\"#结合后台获得制定区域并画出\" class=\"headerlink\" title=\"结合后台获得制定区域并画出\"></a>结合后台获得制定区域并画出</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">ShowArea();</div><div class=\"line\">            //读取已有区域</div><div class=\"line\">            <span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">ShowArea</span></span>() &#123;</div><div class=\"line\"></div><div class=\"line\">                $.post(<span class=\"string\">\"Handler.ashx?action=getAreaData\"</span>, <span class=\"string\">\"\"</span>, <span class=\"keyword\">function</span> (data, status) &#123;</div><div class=\"line\">                    //var data = <span class=\"built_in\">eval</span>(dataJSON);</div><div class=\"line\">                    var points = GetPointsArray(data);</div><div class=\"line\">                    var polygon1 = new BMap.Polygon(points, &#123; strokeColor: <span class=\"string\">\"blue\"</span>, fillColor: <span class=\"string\">\"#f0979f\"</span>, strokeWeight: 2, strokeOpacity: 0.5, fillOpacity: 0.3 &#125;);  //创建多边形</div><div class=\"line\">                    map.addOverlay(polygon1);   //增加多边形</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">function</span> GetPointsArray(points) &#123;</div><div class=\"line\">                var pointsArray = points.split(<span class=\"string\">\";\"</span>);</div><div class=\"line\">                var result = new Array();</div><div class=\"line\">                <span class=\"keyword\">for</span> (var i = 0; i &lt; pointsArray.length; i++) &#123;</div><div class=\"line\">                    result[i] = new BMap.Point(pointsArray[i].split(<span class=\"string\">\",\"</span>)[0], pointsArray[i].split(<span class=\"string\">\",\"</span>)[1]);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"built_in\">return</span> result;</div><div class=\"line\">            &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"后台获得区域（点的集合）\"><a href=\"#后台获得区域（点的集合）\" class=\"headerlink\" title=\"后台获得区域（点的集合）\"></a>后台获得区域（点的集合）</h2><p>使用ajax与一般处理程序<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">using System;</div><div class=\"line\">using System.Collections.Generic;</div><div class=\"line\">using System.Linq;</div><div class=\"line\">using System.Web;</div><div class=\"line\"></div><div class=\"line\">namespace WebApplication3</div><div class=\"line\">&#123;</div><div class=\"line\">    /// &lt;summary&gt;</div><div class=\"line\">    /// Handler 的摘要说明</div><div class=\"line\">    /// &lt;/summary&gt;</div><div class=\"line\">    public class Handler : IHttpHandler</div><div class=\"line\">    &#123;</div><div class=\"line\"></div><div class=\"line\">        public void ProcessRequest(HttpContext context)</div><div class=\"line\">        &#123;</div><div class=\"line\">            string action=context.Request[<span class=\"string\">\"action\"</span>];</div><div class=\"line\">            switch(action)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"getAreaData\"</span>:</div><div class=\"line\">                    GetAreaData(context);</div><div class=\"line\">                    <span class=\"built_in\">break</span>;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void GetAreaData(HttpContext context)</div><div class=\"line\">        &#123;</div><div class=\"line\">            string s = <span class=\"string\">\"108.860872, 34.258506;108.831975, 34.258587;108.827325, 34.254061;108.82198, 34.253861;108.821721, 34.242147;108.82502, 34.242241;108.825366, 34.235732;108.828081, 34.235904;108.828549, 34.225515;108.841104, 34.22704;108.836877, 34.210519;108.839338, 34.205291;108.852262, 34.206639;108.852829, 34.18584;108.875588, 34.185636;108.875624, 34.177398;108.980798, 34.177959;109.00823, 34.180186;109.022781, 34.185512;109.039102, 34.182088;109.060345, 34.191182;109.053019, 34.212803;109.056843, 34.243072;109.054189, 34.257263;109.033871, 34.257004;109.036981, 34.256214;109.037215, 34.240337;109.027373, 34.240809;109.027372, 34.243714;109.022632, 34.243735;109.02261, 34.248791;109.002924, 34.248887;108.971729, 34.236415;108.938526, 34.235527;108.897292, 34.253332;108.89572, 34.257881;108.860872, 34.258506\"</span>;</div><div class=\"line\">            context.Response.Write(s);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        public bool IsReusable</div><div class=\"line\">        &#123;</div><div class=\"line\">            get</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"点聚合及批量弹出窗口\"><a href=\"#点聚合及批量弹出窗口\" class=\"headerlink\" title=\"点聚合及批量弹出窗口\"></a>点聚合及批量弹出窗口</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 百度地图API功能</div><div class=\"line\">           var map = new BMap.Map(<span class=\"string\">\"allmap\"</span>);</div><div class=\"line\">           map.centerAndZoom(new BMap.Point(116.404, 39.915), 4);</div><div class=\"line\">           map.enableScrollWheelZoom();</div><div class=\"line\"></div><div class=\"line\">           var MAX = 10;</div><div class=\"line\">           var markers = [];</div><div class=\"line\">           var pt = null;</div><div class=\"line\">           var i = 0;</div><div class=\"line\">           <span class=\"keyword\">for</span> (; i &lt; MAX; i++) &#123;</div><div class=\"line\">               pt = new BMap.Point(Math.random() * 40 + 85, Math.random() * 30 + 21);</div><div class=\"line\">               var marker = new BMap.Marker(pt);</div><div class=\"line\">               markers.push(marker);</div><div class=\"line\">               var content1 = <span class=\"string\">'&lt;div style=\"margin:0;line-height:20px;padding:2px;\"&gt;内容&lt;/div&gt;'</span>;</div><div class=\"line\">               markers.push(marker);</div><div class=\"line\">              &lt;span style=<span class=\"string\">\"color:#ff0000;\"</span>&gt; //使用闭包 这样内容才能显示的不同，否则全部都会只显示最后一个content1的内容&lt;/span&gt;</div><div class=\"line\">               (<span class=\"keyword\">function</span> (content1) &#123;</div><div class=\"line\">                   marker.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"keyword\">function</span> (e) &#123;</div><div class=\"line\"></div><div class=\"line\">                       //创建检索信息窗口对象</div><div class=\"line\">                       var searchInfoWindow = null;</div><div class=\"line\">                       searchInfoWindow = new BMapLib.SearchInfoWindow(map, content1, &#123;</div><div class=\"line\">                           title: <span class=\"string\">'信息&lt;a target=\"_top\" onclick=\"alert(1)\" style=\"margin-left:5px;font-size:12px;line-height:30px;color:#3d6dcc;font-weight:normal;text-decoration:none;cursor:pointer;\"&gt;详情»&lt;/a&gt;'</span>,      //标题</div><div class=\"line\">                           width: 250,             //宽度</div><div class=\"line\">                           height: 200,              //高度</div><div class=\"line\">                           panel: <span class=\"string\">\"panel\"</span>,         //检索结果面板</div><div class=\"line\">                           <span class=\"built_in\">enable</span>AutoPan: <span class=\"literal\">true</span>,     //自动平移</div><div class=\"line\">                           <span class=\"built_in\">enable</span>SendToPhone: <span class=\"literal\">false</span>,//百度发送短信图标</div><div class=\"line\">                           searchTypes: [</div><div class=\"line\">                               //BMAPLIB_TAB_SEARCH,   //周边检索</div><div class=\"line\">                               //BMAPLIB_TAB_TO_HERE,  //到这里去</div><div class=\"line\">                               //BMAPLIB_TAB_FROM_HERE //从这里出发</div><div class=\"line\">                           ]</div><div class=\"line\">                       &#125;);</div><div class=\"line\"></div><div class=\"line\">                       searchInfoWindow.open(e.target);</div><div class=\"line\"></div><div class=\"line\">                   &#125;);</div><div class=\"line\">               &#125;)(content1)</div><div class=\"line\">           &#125;</div><div class=\"line\">      </div><div class=\"line\">           //最简单的用法，生成一个marker数组，然后调用markerClusterer类即可。</div><div class=\"line\">           var markerClusterer = new BMapLib.MarkerClusterer(map, &#123; markers: markers &#125;);</div></pre></td></tr></table></figure>\n<p><img src=\"http://i2.buimg.com/4851/f6830ddc390b1e99.jpg\" alt=\"\"><br><img src=\"http://i2.buimg.com/4851/fad49890bc5afa59.jpg\" alt=\"\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciu9hd78o0000xs8x1veqqx7e","category_id":"ciu9hd7920004xs8xlko3ydot","_id":"ciu9hd79p000dxs8xg1z5uwv1"},{"post_id":"ciu9hd79m000cxs8xsysn5su9","category_id":"ciu9hd7920004xs8xlko3ydot","_id":"ciu9hd79t000gxs8xpxxhoxxw"},{"post_id":"ciu9hd78x0002xs8x1du7gb2g","category_id":"ciu9hd79l000axs8x4nf2vz3y","_id":"ciu9hd79u000jxs8x6wj5j6ux"},{"post_id":"ciu9hd7980006xs8xlcgktuys","category_id":"ciu9hd79l000axs8x4nf2vz3y","_id":"ciu9hd79w000lxs8x67j4vxam"},{"post_id":"ciu9hd79j0009xs8xnxn244l0","category_id":"ciu9hd79t000hxs8xe02rwa0f","_id":"ciu9hd79z000pxs8xciu879ws"}],"PostTag":[{"post_id":"ciu9hd78o0000xs8x1veqqx7e","tag_id":"ciu9hd7970005xs8xuiulcu38","_id":"ciu9hd79v000kxs8x88uswuih"},{"post_id":"ciu9hd78o0000xs8x1veqqx7e","tag_id":"ciu9hd79l000bxs8x9e1v2re6","_id":"ciu9hd79x000mxs8xymvckwpc"},{"post_id":"ciu9hd78o0000xs8x1veqqx7e","tag_id":"ciu9hd79r000fxs8x5ete8nye","_id":"ciu9hd79y000oxs8x0v7te63l"},{"post_id":"ciu9hd7980006xs8xlcgktuys","tag_id":"ciu9hd79u000ixs8xx5vqjpyr","_id":"ciu9hd79z000qxs8xqc497ram"},{"post_id":"ciu9hd79j0009xs8xnxn244l0","tag_id":"ciu9hd79x000nxs8xq8aky3kd","_id":"ciu9hd7a1000sxs8x5x6fi5gn"},{"post_id":"ciu9hd79m000cxs8xsysn5su9","tag_id":"ciu9hd7a0000rxs8xnwn73tl5","_id":"ciu9hd7a4000uxs8xthaywo0d"},{"post_id":"ciu9hd79m000cxs8xsysn5su9","tag_id":"ciu9hd7a2000txs8xz6j7xvaa","_id":"ciu9hd7a5000vxs8xtksfldib"}],"Tag":[{"name":"Log4Net","_id":"ciu9hd7970005xs8xuiulcu38"},{"name":"ASP.NET日志","_id":"ciu9hd79l000bxs8x9e1v2re6"},{"name":"空日志删除","_id":"ciu9hd79r000fxs8x5ete8nye"},{"name":"扩展方法","_id":"ciu9hd79u000ixs8xx5vqjpyr"},{"name":"浏览器兼容","_id":"ciu9hd79x000nxs8xq8aky3kd"},{"name":"百度地图","_id":"ciu9hd7a0000rxs8xnwn73tl5"},{"name":"地图操作","_id":"ciu9hd7a2000txs8xz6j7xvaa"}]}}